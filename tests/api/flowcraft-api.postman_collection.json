{
  "info": {
    "name": "FlowCraft Studio API",
    "description": "Comprehensive API test collection for FlowCraft Studio application",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "BASE_URL",
      "value": "http://localhost:3000",
      "type": "string",
      "description": "Base URL for the API"
    },
    {
      "key": "auth_token",
      "value": "",
      "type": "string",
      "description": "Authentication token"
    },
    {
      "key": "test_app_id",
      "value": "",
      "type": "string",
      "description": "ID of test app for CRUD operations"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{auth_token}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "Health Check",
      "item": [
        {
          "name": "Get Health Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('status');",
                  "    pm.expect(responseJson).to.have.property('timestamp');",
                  "    pm.expect(responseJson).to.have.property('service');",
                  "});",
                  "",
                  "pm.test('Service status is ok', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.status).to.eql('ok');",
                  "});",
                  "",
                  "pm.test('Response time is less than 1000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{BASE_URL}}/api/health",
              "host": ["{{BASE_URL}}"],
              "path": ["api", "health"]
            },
            "description": "Health check endpoint to verify API is running"
          }
        }
      ],
      "description": "Health monitoring endpoints"
    },
    {
      "name": "Metrics",
      "item": [
        {
          "name": "Get Prometheus Metrics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Content-Type is text/plain', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');",
                  "});",
                  "",
                  "pm.test('Response contains metrics data', function () {",
                  "    pm.expect(pm.response.text()).to.include('http_requests_total');",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{BASE_URL}}/api/metrics",
              "host": ["{{BASE_URL}}"],
              "path": ["api", "metrics"]
            },
            "description": "Prometheus metrics endpoint"
          }
        }
      ],
      "description": "Application metrics endpoints"
    },
    {
      "name": "Apps Management",
      "item": [
        {
          "name": "Get All Apps",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 401', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response has data property', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('data');",
                  "        pm.expect(responseJson.data).to.be.an('array');",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    pm.test('Unauthorized response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "}",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{BASE_URL}}/api/apps",
              "host": ["{{BASE_URL}}"],
              "path": ["api", "apps"]
            },
            "description": "Get all apps for authenticated user"
          }
        },
        {
          "name": "Create New App",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201 or 401', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([201, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    pm.test('Response has data property', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('data');",
                  "        pm.expect(responseJson.data).to.have.property('id');",
                  "        pm.expect(responseJson.data).to.have.property('name');",
                  "        ",
                  "        // Store app ID for subsequent tests",
                  "        pm.collectionVariables.set('test_app_id', responseJson.data.id);",
                  "    });",
                  "    ",
                  "    pm.test('App name matches request', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson.data.name).to.eql('Test API App');",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    pm.test('Unauthorized response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "}",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test API App\",\n  \"html\": \"<h1>Test App</h1>\",\n  \"css\": \"h1 { color: blue; }\",\n  \"js\": \"console.log('Test app loaded');\"\n}"
            },
            "url": {
              "raw": "{{BASE_URL}}/api/apps/create",
              "host": ["{{BASE_URL}}"],
              "path": ["api", "apps", "create"]
            },
            "description": "Create a new app"
          }
        },
        {
          "name": "Get App by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200, 401, or 404', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response has data property', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('data');",
                  "        pm.expect(responseJson.data).to.have.property('id');",
                  "        pm.expect(responseJson.data).to.have.property('name');",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    pm.test('Unauthorized response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "} else if (pm.response.code === 404) {",
                  "    pm.test('Not found response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "}",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{BASE_URL}}/api/apps/{{test_app_id}}",
              "host": ["{{BASE_URL}}"],
              "path": ["api", "apps", "{{test_app_id}}"]
            },
            "description": "Get specific app by ID"
          }
        },
        {
          "name": "Update App",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200, 401, or 404', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response has data property', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('data');",
                  "        pm.expect(responseJson.data).to.have.property('id');",
                  "        pm.expect(responseJson.data).to.have.property('name');",
                  "    });",
                  "    ",
                  "    pm.test('App name was updated', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson.data.name).to.eql('Updated Test API App');",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    pm.test('Unauthorized response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "} else if (pm.response.code === 404) {",
                  "    pm.test('Not found response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "}",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test API App\",\n  \"html\": \"<h1>Updated Test App</h1>\",\n  \"css\": \"h1 { color: red; }\"\n}"
            },
            "url": {
              "raw": "{{BASE_URL}}/api/apps/{{test_app_id}}/update",
              "host": ["{{BASE_URL}}"],
              "path": ["api", "apps", "{{test_app_id}}", "update"]
            },
            "description": "Update an existing app"
          }
        },
        {
          "name": "Delete App",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200, 401, or 500', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 500]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response has success message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('message');",
                  "        pm.expect(responseJson.message).to.include('deleted');",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    pm.test('Unauthorized response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "} else if (pm.response.code === 500) {",
                  "    pm.test('Server error response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "}",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{BASE_URL}}/api/apps/{{test_app_id}}/delete",
              "host": ["{{BASE_URL}}"],
              "path": ["api", "apps", "{{test_app_id}}", "delete"]
            },
            "description": "Delete an app"
          }
        }
      ],
      "description": "Apps CRUD operations"
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Auth Confirm (GET)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 302 (redirect)', function () {",
                  "    pm.expect(pm.response.code).to.eql(302);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{BASE_URL}}/auth/confirm?token_hash=dummy&type=signup",
              "host": ["{{BASE_URL}}"],
              "path": ["auth", "confirm"],
              "query": [
                {
                  "key": "token_hash",
                  "value": "dummy"
                },
                {
                  "key": "type",
                  "value": "signup"
                }
              ]
            },
            "description": "Authentication confirmation endpoint (expected to redirect)"
          }
        }
      ],
      "description": "Authentication related endpoints"
    },
    {
      "name": "Error Handling Tests",
      "item": [
        {
          "name": "Test Invalid App Creation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400 or 401', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 401]);",
                  "});",
                  "",
                  "pm.test('Response has error message', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"\",\n  \"html\": \"<h1>Test</h1>\"\n}"
            },
            "url": {
              "raw": "{{BASE_URL}}/api/apps/create",
              "host": ["{{BASE_URL}}"],
              "path": ["api", "apps", "create"]
            },
            "description": "Test app creation with invalid data (empty name)"
          }
        },
        {
          "name": "Test Nonexistent App Access",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404 or 401', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([404, 401]);",
                  "});",
                  "",
                  "pm.test('Response has error message', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{BASE_URL}}/api/apps/99999999-9999-9999-9999-999999999999",
              "host": ["{{BASE_URL}}"],
              "path": ["api", "apps", "99999999-9999-9999-9999-999999999999"]
            },
            "description": "Test access to nonexistent app"
          }
        }
      ],
      "description": "Error handling and edge case tests"
    }
  ]
}