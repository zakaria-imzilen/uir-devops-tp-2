{
  "collection": {
    "item": [
      {
        "id": "f7ea9a98-1896-4eb1-a04f-fcc0a733588a",
        "name": "Health Check",
        "description": {
          "content": "Health monitoring endpoints",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "d648d959-9a04-4d8a-9411-ca3af7aec461",
            "name": "Get Health Status",
            "request": {
              "description": {
                "content": "Health check endpoint to verify API is running",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ddea8fbc-c2e9-48df-af65-81c39717dad9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response has correct structure', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson).to.have.property('status');",
                    "    pm.expect(responseJson).to.have.property('timestamp');",
                    "    pm.expect(responseJson).to.have.property('service');",
                    "});",
                    "",
                    "pm.test('Service status is ok', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.status).to.eql('ok');",
                    "});",
                    "",
                    "pm.test('Response time is less than 1000ms', function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                    "});"
                  ],
                  "_lastExecutionId": "0af9e635-d48b-44ab-a9e6-bf09342a8eb2"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "460d2fff-9903-49d8-bbf5-609db3637a00",
        "name": "Metrics",
        "description": {
          "content": "Application metrics endpoints",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "267991b6-62ab-41c6-9bf9-fbaa777cb6b3",
            "name": "Get Prometheus Metrics",
            "request": {
              "description": {
                "content": "Prometheus metrics endpoint",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "metrics"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f9d6fead-2b0b-44f0-9369-30ecbdcf8b52",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Content-Type is text/plain', function () {",
                    "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');",
                    "});",
                    "",
                    "pm.test('Response contains metrics data', function () {",
                    "    pm.expect(pm.response.text()).to.include('http_requests_total');",
                    "});",
                    "",
                    "pm.test('Response time is less than 2000ms', function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                    "});"
                  ],
                  "_lastExecutionId": "22689c6c-86b6-486e-8f1a-3ed4bdaf72f1"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "cf7761f7-0711-4c45-9f7f-b2f5d8b5c432",
        "name": "Apps Management",
        "description": {
          "content": "Apps CRUD operations",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "58b132b3-bb19-41df-a453-e6b32822ae02",
            "name": "Get All Apps",
            "request": {
              "description": {
                "content": "Get all apps for authenticated user",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "apps"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "d8865627-1696-4cb7-b46e-0c81dbf398ac",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200 or 401', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                    "});",
                    "",
                    "if (pm.response.code === 200) {",
                    "    pm.test('Response has data property', function () {",
                    "        const responseJson = pm.response.json();",
                    "        pm.expect(responseJson).to.have.property('data');",
                    "        pm.expect(responseJson.data).to.be.an('array');",
                    "    });",
                    "} else if (pm.response.code === 401) {",
                    "    pm.test('Unauthorized response has error message', function () {",
                    "        const responseJson = pm.response.json();",
                    "        pm.expect(responseJson).to.have.property('error');",
                    "    });",
                    "}",
                    "",
                    "pm.test('Response time is less than 3000ms', function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                    "});"
                  ],
                  "_lastExecutionId": "5e469a43-8eab-49a3-85e4-8dd7dcbf3e2b"
                }
              }
            ]
          },
          {
            "id": "4323e29f-6357-4124-af93-532f208cd262",
            "name": "Create New App",
            "request": {
              "description": {
                "content": "Create a new app",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "apps",
                  "create"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"name\": \"Test API App\",\n  \"html\": \"<h1>Test App</h1>\",\n  \"css\": \"h1 { color: blue; }\",\n  \"js\": \"console.log('Test app loaded');\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "db8b02aa-565c-4246-a65a-d9848e21b74d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 201 or 401', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([201, 401]);",
                    "});",
                    "",
                    "if (pm.response.code === 201) {",
                    "    pm.test('Response has data property', function () {",
                    "        const responseJson = pm.response.json();",
                    "        pm.expect(responseJson).to.have.property('data');",
                    "        pm.expect(responseJson.data).to.have.property('id');",
                    "        pm.expect(responseJson.data).to.have.property('name');",
                    "        ",
                    "        // Store app ID for subsequent tests",
                    "        pm.collectionVariables.set('test_app_id', responseJson.data.id);",
                    "    });",
                    "    ",
                    "    pm.test('App name matches request', function () {",
                    "        const responseJson = pm.response.json();",
                    "        pm.expect(responseJson.data.name).to.eql('Test API App');",
                    "    });",
                    "} else if (pm.response.code === 401) {",
                    "    pm.test('Unauthorized response has error message', function () {",
                    "        const responseJson = pm.response.json();",
                    "        pm.expect(responseJson).to.have.property('error');",
                    "    });",
                    "}",
                    "",
                    "pm.test('Response time is less than 3000ms', function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                    "});"
                  ],
                  "_lastExecutionId": "78ada079-b145-4c01-82c4-01e187991d14"
                }
              }
            ]
          },
          {
            "id": "d3decd0a-7499-4bb0-ad79-82e60fdeb083",
            "name": "Get App by ID",
            "request": {
              "description": {
                "content": "Get specific app by ID",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "apps",
                  "{{test_app_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "61e09f4b-cf49-4384-ae6a-2363eda2b308",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200, 401, or 404', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                    "});",
                    "",
                    "if (pm.response.code === 200) {",
                    "    pm.test('Response has data property', function () {",
                    "        const responseJson = pm.response.json();",
                    "        pm.expect(responseJson).to.have.property('data');",
                    "        pm.expect(responseJson.data).to.have.property('id');",
                    "        pm.expect(responseJson.data).to.have.property('name');",
                    "    });",
                    "} else if (pm.response.code === 401) {",
                    "    pm.test('Unauthorized response has error message', function () {",
                    "        const responseJson = pm.response.json();",
                    "        pm.expect(responseJson).to.have.property('error');",
                    "    });",
                    "} else if (pm.response.code === 404) {",
                    "    pm.test('Not found response has error message', function () {",
                    "        const responseJson = pm.response.json();",
                    "        pm.expect(responseJson).to.have.property('error');",
                    "    });",
                    "}",
                    "",
                    "pm.test('Response time is less than 3000ms', function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                    "});"
                  ],
                  "_lastExecutionId": "b785828b-9c37-428d-b9fa-0214458364d6"
                }
              }
            ]
          },
          {
            "id": "609a886d-cd93-4c21-95dd-74ae032bcbeb",
            "name": "Update App",
            "request": {
              "description": {
                "content": "Update an existing app",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "apps",
                  "{{test_app_id}}",
                  "update"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"name\": \"Updated Test API App\",\n  \"html\": \"<h1>Updated Test App</h1>\",\n  \"css\": \"h1 { color: red; }\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "96bea0cd-f28a-47e5-8f2e-b6e72674b2ca",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200, 401, or 404', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                    "});",
                    "",
                    "if (pm.response.code === 200) {",
                    "    pm.test('Response has data property', function () {",
                    "        const responseJson = pm.response.json();",
                    "        pm.expect(responseJson).to.have.property('data');",
                    "        pm.expect(responseJson.data).to.have.property('id');",
                    "        pm.expect(responseJson.data).to.have.property('name');",
                    "    });",
                    "    ",
                    "    pm.test('App name was updated', function () {",
                    "        const responseJson = pm.response.json();",
                    "        pm.expect(responseJson.data.name).to.eql('Updated Test API App');",
                    "    });",
                    "} else if (pm.response.code === 401) {",
                    "    pm.test('Unauthorized response has error message', function () {",
                    "        const responseJson = pm.response.json();",
                    "        pm.expect(responseJson).to.have.property('error');",
                    "    });",
                    "} else if (pm.response.code === 404) {",
                    "    pm.test('Not found response has error message', function () {",
                    "        const responseJson = pm.response.json();",
                    "        pm.expect(responseJson).to.have.property('error');",
                    "    });",
                    "}",
                    "",
                    "pm.test('Response time is less than 3000ms', function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                    "});"
                  ],
                  "_lastExecutionId": "df9bb3a7-994a-42ca-bf29-25f72a2c917e"
                }
              }
            ]
          },
          {
            "id": "7662d72a-bf0c-43d2-b9c4-82910a22700f",
            "name": "Delete App",
            "request": {
              "description": {
                "content": "Delete an app",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "apps",
                  "{{test_app_id}}",
                  "delete"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "07204f5b-3b71-4fa5-bd70-f5dd1d716405",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200, 401, or 500', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 500]);",
                    "});",
                    "",
                    "if (pm.response.code === 200) {",
                    "    pm.test('Response has success message', function () {",
                    "        const responseJson = pm.response.json();",
                    "        pm.expect(responseJson).to.have.property('message');",
                    "        pm.expect(responseJson.message).to.include('deleted');",
                    "    });",
                    "} else if (pm.response.code === 401) {",
                    "    pm.test('Unauthorized response has error message', function () {",
                    "        const responseJson = pm.response.json();",
                    "        pm.expect(responseJson).to.have.property('error');",
                    "    });",
                    "} else if (pm.response.code === 500) {",
                    "    pm.test('Server error response has error message', function () {",
                    "        const responseJson = pm.response.json();",
                    "        pm.expect(responseJson).to.have.property('error');",
                    "    });",
                    "}",
                    "",
                    "pm.test('Response time is less than 3000ms', function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                    "});"
                  ],
                  "_lastExecutionId": "6d315dab-9d38-46bd-bbd3-ef9bad017ae2"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "613ae34b-52c4-45b0-be43-ee43a60e40af",
        "name": "Authentication",
        "description": {
          "content": "Authentication related endpoints",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "56e9a3ed-109b-4b8b-925a-013788fae50f",
            "name": "Auth Confirm (GET)",
            "request": {
              "description": {
                "content": "Authentication confirmation endpoint (expected to redirect)",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "auth",
                  "confirm"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [
                  {
                    "key": "token_hash",
                    "value": "dummy"
                  },
                  {
                    "key": "type",
                    "value": "signup"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "9e59a1d8-98e8-4247-90ef-04ddcaddd66e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 302 (redirect)', function () {",
                    "    pm.expect(pm.response.code).to.eql(302);",
                    "});",
                    "",
                    "pm.test('Response time is less than 2000ms', function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                    "});"
                  ],
                  "_lastExecutionId": "f132b633-4ccd-487d-afe4-683b86f3f193"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "00141775-c7a5-4a26-a760-fef1f49501c9",
        "name": "Error Handling Tests",
        "description": {
          "content": "Error handling and edge case tests",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "33a45ff7-8d4a-4aed-8f0d-2cc17f84770d",
            "name": "Test Invalid App Creation",
            "request": {
              "description": {
                "content": "Test app creation with invalid data (empty name)",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "apps",
                  "create"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"name\": \"\",\n  \"html\": \"<h1>Test</h1>\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4c624495-2932-4058-8ea9-fc7a439114a9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 400 or 401', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([400, 401]);",
                    "});",
                    "",
                    "pm.test('Response has error message', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson).to.have.property('error');",
                    "});",
                    "",
                    "pm.test('Response time is less than 3000ms', function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                    "});"
                  ],
                  "_lastExecutionId": "ee8aacd9-0820-4253-b080-074da61876e1"
                }
              }
            ]
          },
          {
            "id": "d89cf653-9f50-4b9f-9265-6f09f0616486",
            "name": "Test Nonexistent App Access",
            "request": {
              "description": {
                "content": "Test access to nonexistent app",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "apps",
                  "99999999-9999-9999-9999-999999999999"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "cd7d9eee-a81c-482e-941a-baff05fbcebd",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 404 or 401', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([404, 401]);",
                    "});",
                    "",
                    "pm.test('Response has error message', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson).to.have.property('error');",
                    "});",
                    "",
                    "pm.test('Response time is less than 3000ms', function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                    "});"
                  ],
                  "_lastExecutionId": "3ceab9a9-3b3e-474a-bb05-e3f4f6d0aae5"
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "auth": {
      "type": "bearer",
      "bearer": [
        {
          "type": "string",
          "value": "{{auth_token}}",
          "key": "token"
        }
      ]
    },
    "event": [],
    "variable": [
      {
        "description": {
          "content": "Base URL for the API",
          "type": "text/plain"
        },
        "type": "string",
        "value": "{{BASE_URL}}",
        "key": "base_url"
      },
      {
        "description": {
          "content": "Authentication token",
          "type": "text/plain"
        },
        "type": "string",
        "value": "",
        "key": "auth_token"
      },
      {
        "description": {
          "content": "ID of test app for CRUD operations",
          "type": "text/plain"
        },
        "type": "string",
        "value": "",
        "key": "test_app_id"
      }
    ],
    "info": {
      "_postman_id": "c67e8122-f870-49d8-8188-42190a2fd7e5",
      "name": "FlowCraft Studio API",
      "version": {
        "raw": "1.0.0",
        "major": 1,
        "minor": 0,
        "patch": 0,
        "prerelease": [],
        "build": [],
        "string": "1.0.0"
      },
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Comprehensive API test collection for FlowCraft Studio application",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "id": "local-env",
    "name": "Local Development",
    "values": [
      {
        "type": "any",
        "value": "http://localhost:3000",
        "key": "BASE_URL"
      },
      {
        "type": "any",
        "value": "5000",
        "key": "API_TIMEOUT"
      }
    ]
  },
  "globals": {
    "id": "61446e5c-1daa-4eaa-8fde-22ab59698629",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 10,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 10,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 10,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 10,
        "pending": 0,
        "failed": 10
      },
      "tests": {
        "total": 10,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 26,
        "pending": 0,
        "failed": 26
      },
      "testScripts": {
        "total": 10,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 0,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 0,
      "responseMin": 0,
      "responseMax": 0,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1758971164434,
      "completed": 1758971165320
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 10,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b1bc8289-a059-4b55-984a-461f815c7676",
          "httpRequestId": "e9eb3da0-ff1c-449a-a067-b8d09d54753e"
        },
        "item": {
          "id": "d648d959-9a04-4d8a-9411-ca3af7aec461",
          "name": "Get Health Status",
          "request": {
            "description": {
              "content": "Health check endpoint to verify API is running",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ddea8fbc-c2e9-48df-af65-81c39717dad9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('status');",
                  "    pm.expect(responseJson).to.have.property('timestamp');",
                  "    pm.expect(responseJson).to.have.property('service');",
                  "});",
                  "",
                  "pm.test('Service status is ok', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.status).to.eql('ok');",
                  "});",
                  "",
                  "pm.test('Response time is less than 1000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "_lastExecutionId": "0af9e635-d48b-44ab-a9e6-bf09342a8eb2"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Health check endpoint to verify API is running",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "dbfafc2e-8a93-4e4e-ba27-f65dc88dd27e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "d648d959-9a04-4d8a-9411-ca3af7aec461",
        "requestError": {
          "code": "ERR_INVALID_IP_ADDRESS"
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "Response has correct structure",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response has correct structure",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:1)"
            }
          },
          {
            "assertion": "Service status is ok",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "Service status is ok",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:1)"
            }
          },
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Response time is less than 1000ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:4:1)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "22c66f2b-83c4-4abf-9985-3edbccaf17bb",
          "length": 10,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d5a1e953-a92a-438e-9e04-b2d9b0c2ec8c"
        },
        "item": {
          "id": "267991b6-62ab-41c6-9bf9-fbaa777cb6b3",
          "name": "Get Prometheus Metrics",
          "request": {
            "description": {
              "content": "Prometheus metrics endpoint",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "metrics"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f9d6fead-2b0b-44f0-9369-30ecbdcf8b52",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Content-Type is text/plain', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');",
                  "});",
                  "",
                  "pm.test('Response contains metrics data', function () {",
                  "    pm.expect(pm.response.text()).to.include('http_requests_total');",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "_lastExecutionId": "22689c6c-86b6-486e-8f1a-3ed4bdaf72f1"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Prometheus metrics endpoint",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "metrics"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d22171f4-67e6-4d4a-b6b2-d631e23d7476",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "267991b6-62ab-41c6-9bf9-fbaa777cb6b3",
        "requestError": {
          "code": "ERR_INVALID_IP_ADDRESS"
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "Content-Type is text/plain",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Content-Type is text/plain",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:2)"
            }
          },
          {
            "assertion": "Response contains metrics data",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response contains metrics data",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:2)"
            }
          },
          {
            "assertion": "Response time is less than 2000ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Response time is less than 2000ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:4:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "339c91eb-f08f-4eed-a4d5-8713313cc252",
          "length": 10,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a39edbe0-91a0-4f7d-aa3e-f2e0133f5c3a"
        },
        "item": {
          "id": "58b132b3-bb19-41df-a453-e6b32822ae02",
          "name": "Get All Apps",
          "request": {
            "description": {
              "content": "Get all apps for authenticated user",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "apps"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d8865627-1696-4cb7-b46e-0c81dbf398ac",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200 or 401', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response has data property', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('data');",
                  "        pm.expect(responseJson.data).to.be.an('array');",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    pm.test('Unauthorized response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "}",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "5e469a43-8eab-49a3-85e4-8dd7dcbf3e2b"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Get all apps for authenticated user",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "apps"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2b7d7911-fa67-406f-8e69-9bb94e988695",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "58b132b3-bb19-41df-a453-e6b32822ae02",
        "requestError": {
          "code": "ERR_INVALID_IP_ADDRESS"
        },
        "assertions": [
          {
            "assertion": "Status code is 200 or 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200 or 401",
              "message": "expected undefined to be one of [ 200, 401 ]",
              "stack": "AssertionError: expected undefined to be one of [ 200, 401 ]\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "Response time is less than 3000ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time is less than 3000ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "467dbd0e-a6e5-43b8-b6f5-f840ea8a3bf3",
          "length": 10,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "022c2f5f-921d-4181-929e-4495e7b97d22"
        },
        "item": {
          "id": "4323e29f-6357-4124-af93-532f208cd262",
          "name": "Create New App",
          "request": {
            "description": {
              "content": "Create a new app",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "apps",
                "create"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test API App\",\n  \"html\": \"<h1>Test App</h1>\",\n  \"css\": \"h1 { color: blue; }\",\n  \"js\": \"console.log('Test app loaded');\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "db8b02aa-565c-4246-a65a-d9848e21b74d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201 or 401', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([201, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    pm.test('Response has data property', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('data');",
                  "        pm.expect(responseJson.data).to.have.property('id');",
                  "        pm.expect(responseJson.data).to.have.property('name');",
                  "        ",
                  "        // Store app ID for subsequent tests",
                  "        pm.collectionVariables.set('test_app_id', responseJson.data.id);",
                  "    });",
                  "    ",
                  "    pm.test('App name matches request', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson.data.name).to.eql('Test API App');",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    pm.test('Unauthorized response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "}",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "78ada079-b145-4c01-82c4-01e187991d14"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Create a new app",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "apps",
              "create"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b98586c9-1204-4039-9369-0ed7b43324b8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Test API App\",\n  \"html\": \"<h1>Test App</h1>\",\n  \"css\": \"h1 { color: blue; }\",\n  \"js\": \"console.log('Test app loaded');\"\n}"
          }
        },
        "id": "4323e29f-6357-4124-af93-532f208cd262",
        "requestError": {
          "code": "ERR_INVALID_IP_ADDRESS"
        },
        "assertions": [
          {
            "assertion": "Status code is 201 or 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 201 or 401",
              "message": "expected undefined to be one of [ 201, 401 ]",
              "stack": "AssertionError: expected undefined to be one of [ 201, 401 ]\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "Response time is less than 3000ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time is less than 3000ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "251d28a3-215b-4f7b-bf3e-070eff49b026",
          "length": 10,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ec5fe26f-5daa-46bc-b8c8-29d08e623848"
        },
        "item": {
          "id": "d3decd0a-7499-4bb0-ad79-82e60fdeb083",
          "name": "Get App by ID",
          "request": {
            "description": {
              "content": "Get specific app by ID",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "apps",
                "{{test_app_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "61e09f4b-cf49-4384-ae6a-2363eda2b308",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200, 401, or 404', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response has data property', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('data');",
                  "        pm.expect(responseJson.data).to.have.property('id');",
                  "        pm.expect(responseJson.data).to.have.property('name');",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    pm.test('Unauthorized response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "} else if (pm.response.code === 404) {",
                  "    pm.test('Not found response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "}",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "b785828b-9c37-428d-b9fa-0214458364d6"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Get specific app by ID",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "apps",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ced32bd0-0304-4937-b6c4-e0274ca017a2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "d3decd0a-7499-4bb0-ad79-82e60fdeb083",
        "requestError": {
          "code": "ERR_INVALID_IP_ADDRESS"
        },
        "assertions": [
          {
            "assertion": "Status code is 200, 401, or 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200, 401, or 404",
              "message": "expected undefined to be one of [ 200, 401, 404 ]",
              "stack": "AssertionError: expected undefined to be one of [ 200, 401, 404 ]\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "Response time is less than 3000ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time is less than 3000ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ca3c9907-95c9-4e85-9afb-1358c4f10501",
          "length": 10,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9625f580-6c7b-4cf8-bf13-53acc7feeb00"
        },
        "item": {
          "id": "609a886d-cd93-4c21-95dd-74ae032bcbeb",
          "name": "Update App",
          "request": {
            "description": {
              "content": "Update an existing app",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "apps",
                "{{test_app_id}}",
                "update"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test API App\",\n  \"html\": \"<h1>Updated Test App</h1>\",\n  \"css\": \"h1 { color: red; }\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "96bea0cd-f28a-47e5-8f2e-b6e72674b2ca",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200, 401, or 404', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response has data property', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('data');",
                  "        pm.expect(responseJson.data).to.have.property('id');",
                  "        pm.expect(responseJson.data).to.have.property('name');",
                  "    });",
                  "    ",
                  "    pm.test('App name was updated', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson.data.name).to.eql('Updated Test API App');",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    pm.test('Unauthorized response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "} else if (pm.response.code === 404) {",
                  "    pm.test('Not found response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "}",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "df9bb3a7-994a-42ca-bf29-25f72a2c917e"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Update an existing app",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "apps",
              "",
              "update"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f6a40440-a947-40f3-acde-dc4f409bf038",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Updated Test API App\",\n  \"html\": \"<h1>Updated Test App</h1>\",\n  \"css\": \"h1 { color: red; }\"\n}"
          }
        },
        "id": "609a886d-cd93-4c21-95dd-74ae032bcbeb",
        "requestError": {
          "code": "ERR_INVALID_IP_ADDRESS"
        },
        "assertions": [
          {
            "assertion": "Status code is 200, 401, or 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200, 401, or 404",
              "message": "expected undefined to be one of [ 200, 401, 404 ]",
              "stack": "AssertionError: expected undefined to be one of [ 200, 401, 404 ]\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "Response time is less than 3000ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time is less than 3000ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "392287ac-fe20-4435-89c8-f3a43ab7190d",
          "length": 10,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "2a71078e-96a6-4c25-a220-90a928a4379c"
        },
        "item": {
          "id": "7662d72a-bf0c-43d2-b9c4-82910a22700f",
          "name": "Delete App",
          "request": {
            "description": {
              "content": "Delete an app",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "apps",
                "{{test_app_id}}",
                "delete"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "07204f5b-3b71-4fa5-bd70-f5dd1d716405",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200, 401, or 500', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 500]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response has success message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('message');",
                  "        pm.expect(responseJson.message).to.include('deleted');",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    pm.test('Unauthorized response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "} else if (pm.response.code === 500) {",
                  "    pm.test('Server error response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "}",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "6d315dab-9d38-46bd-bbd3-ef9bad017ae2"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Delete an app",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "apps",
              "",
              "delete"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7c754ba6-7550-4f82-a015-d38e277e652a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "id": "7662d72a-bf0c-43d2-b9c4-82910a22700f",
        "requestError": {
          "code": "ERR_INVALID_IP_ADDRESS"
        },
        "assertions": [
          {
            "assertion": "Status code is 200, 401, or 500",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200, 401, or 500",
              "message": "expected undefined to be one of [ 200, 401, 500 ]",
              "stack": "AssertionError: expected undefined to be one of [ 200, 401, 500 ]\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "Response time is less than 3000ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time is less than 3000ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "3e2b06e2-9852-4cb1-bcc4-f3ff7422ccbf",
          "length": 10,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e037c2ad-1ccf-4c6c-929a-b8a3674dc127"
        },
        "item": {
          "id": "56e9a3ed-109b-4b8b-925a-013788fae50f",
          "name": "Auth Confirm (GET)",
          "request": {
            "description": {
              "content": "Authentication confirmation endpoint (expected to redirect)",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "auth",
                "confirm"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "token_hash",
                  "value": "dummy"
                },
                {
                  "key": "type",
                  "value": "signup"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9e59a1d8-98e8-4247-90ef-04ddcaddd66e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 302 (redirect)', function () {",
                  "    pm.expect(pm.response.code).to.eql(302);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "_lastExecutionId": "f132b633-4ccd-487d-afe4-683b86f3f193"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Authentication confirmation endpoint (expected to redirect)",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "auth",
              "confirm"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "token_hash",
                "value": "dummy"
              },
              {
                "key": "type",
                "value": "signup"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "409bbae0-b08f-441d-b270-e794cfae86aa",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "56e9a3ed-109b-4b8b-925a-013788fae50f",
        "requestError": {
          "code": "ERR_INVALID_IP_ADDRESS"
        },
        "assertions": [
          {
            "assertion": "Status code is 302 (redirect)",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 302 (redirect)",
              "message": "expected undefined to deeply equal 302",
              "stack": "AssertionError: expected undefined to deeply equal 302\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "Response time is less than 2000ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time is less than 2000ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c61dbd06-402e-457e-9864-0b84b96d96c8",
          "length": 10,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "84b77936-caa7-4b67-8410-0657c6c3a232"
        },
        "item": {
          "id": "33a45ff7-8d4a-4aed-8f0d-2cc17f84770d",
          "name": "Test Invalid App Creation",
          "request": {
            "description": {
              "content": "Test app creation with invalid data (empty name)",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "apps",
                "create"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"\",\n  \"html\": \"<h1>Test</h1>\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4c624495-2932-4058-8ea9-fc7a439114a9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400 or 401', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 401]);",
                  "});",
                  "",
                  "pm.test('Response has error message', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "ee8aacd9-0820-4253-b080-074da61876e1"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Test app creation with invalid data (empty name)",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "apps",
              "create"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6d342605-7e77-4a7f-b6ab-b5a217a9f673",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"\",\n  \"html\": \"<h1>Test</h1>\"\n}"
          }
        },
        "id": "33a45ff7-8d4a-4aed-8f0d-2cc17f84770d",
        "requestError": {
          "code": "ERR_INVALID_IP_ADDRESS"
        },
        "assertions": [
          {
            "assertion": "Status code is 400 or 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400 or 401",
              "message": "expected undefined to be one of [ 400, 401 ]",
              "stack": "AssertionError: expected undefined to be one of [ 400, 401 ]\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "Response has error message",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response has error message",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:9)"
            }
          },
          {
            "assertion": "Response time is less than 3000ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response time is less than 3000ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:3:9)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "e4bdc70d-b066-4a96-8def-95e9333b8264",
          "length": 10,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a32f3bbd-0ea1-4bc7-a7ca-35e48c904fdb"
        },
        "item": {
          "id": "d89cf653-9f50-4b9f-9265-6f09f0616486",
          "name": "Test Nonexistent App Access",
          "request": {
            "description": {
              "content": "Test access to nonexistent app",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "apps",
                "99999999-9999-9999-9999-999999999999"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cd7d9eee-a81c-482e-941a-baff05fbcebd",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 404 or 401', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([404, 401]);",
                  "});",
                  "",
                  "pm.test('Response has error message', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "3ceab9a9-3b3e-474a-bb05-e3f4f6d0aae5"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Test access to nonexistent app",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "apps",
              "99999999-9999-9999-9999-999999999999"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "097227ef-b8eb-400b-a160-c54e0288238c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "d89cf653-9f50-4b9f-9265-6f09f0616486",
        "requestError": {
          "code": "ERR_INVALID_IP_ADDRESS"
        },
        "assertions": [
          {
            "assertion": "Status code is 404 or 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 404 or 401",
              "message": "expected undefined to be one of [ 404, 401 ]",
              "stack": "AssertionError: expected undefined to be one of [ 404, 401 ]\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "Response has error message",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response has error message",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:10)"
            }
          },
          {
            "assertion": "Response time is less than 3000ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response time is less than 3000ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:3:10)"
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 0
    },
    "failures": [
      {
        "error": {
          "code": "ERR_INVALID_IP_ADDRESS",
          "name": "TypeError",
          "message": "Invalid IP address: undefined",
          "stack": "TypeError [ERR_INVALID_IP_ADDRESS]: Invalid IP address: undefined\n    at emitLookup (node:net:1492:17)\n    at C:\\Dev's Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js:303:31\n    at Socket.done (C:\\Dev's Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js:254:21)\n    at Object.onceWrapper (node:events:633:26)\n    at Socket.emit (node:events:518:28)\n    at emitErrorNT (node:internal/streams/destroy:170:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:129:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)",
          "checksum": "7e04c003ff769fda9c017ef6fec24090",
          "id": "cbd4022d-c8a4-4a79-9178-f0533859fb65",
          "timestamp": 1758971164499,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1492,
              "functionName": "emitLookup",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 17,
              "native": false
            },
            {
              "fileName": "Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js",
              "lineNumber": 303,
              "functionName": "C:\\Dev's",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js",
              "lineNumber": 254,
              "functionName": "Socket.done (C:\\Dev's",
              "typeName": "Socket",
              "methodName": "done (C:\\Dev's",
              "columnNumber": 21,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 633,
              "functionName": "Object.onceWrapper",
              "typeName": "Object",
              "methodName": "onceWrapper",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 518,
              "functionName": "Socket.emit",
              "typeName": "Socket",
              "methodName": "emit",
              "columnNumber": 28,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 170,
              "functionName": "emitErrorNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 129,
              "functionName": "emitErrorCloseNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 3,
              "native": false
            },
            {
              "fileName": "node:internal/process/task_queues",
              "lineNumber": 90,
              "functionName": "process.processTicksAndRejections",
              "typeName": "process",
              "methodName": "processTicksAndRejections",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "d648d959-9a04-4d8a-9411-ca3af7aec461",
          "name": "Get Health Status",
          "request": {
            "description": {
              "content": "Health check endpoint to verify API is running",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ddea8fbc-c2e9-48df-af65-81c39717dad9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('status');",
                  "    pm.expect(responseJson).to.have.property('timestamp');",
                  "    pm.expect(responseJson).to.have.property('service');",
                  "});",
                  "",
                  "pm.test('Service status is ok', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.status).to.eql('ok');",
                  "});",
                  "",
                  "pm.test('Response time is less than 1000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "_lastExecutionId": "0af9e635-d48b-44ab-a9e6-bf09342a8eb2"
              }
            }
          ]
        },
        "parent": {
          "id": "f7ea9a98-1896-4eb1-a04f-fcc0a733588a",
          "name": "Health Check",
          "description": {
            "content": "Health monitoring endpoints",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d648d959-9a04-4d8a-9411-ca3af7aec461",
              "name": "Get Health Status",
              "request": {
                "description": {
                  "content": "Health check endpoint to verify API is running",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ddea8fbc-c2e9-48df-af65-81c39717dad9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct structure', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('status');",
                      "    pm.expect(responseJson).to.have.property('timestamp');",
                      "    pm.expect(responseJson).to.have.property('service');",
                      "});",
                      "",
                      "pm.test('Service status is ok', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.status).to.eql('ok');",
                      "});",
                      "",
                      "pm.test('Response time is less than 1000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});"
                    ],
                    "_lastExecutionId": "0af9e635-d48b-44ab-a9e6-bf09342a8eb2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 10,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b1bc8289-a059-4b55-984a-461f815c7676",
          "httpRequestId": "e9eb3da0-ff1c-449a-a067-b8d09d54753e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected { Object (id, _details, ...) } to have property 'code'",
          "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)",
          "checksum": "b149b18033a9c325e37d8773a6bd75c3",
          "id": "c08c58ce-dbbd-42f6-b273-8d84b0d58d68",
          "timestamp": 1758971164523,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "d648d959-9a04-4d8a-9411-ca3af7aec461",
          "name": "Get Health Status",
          "request": {
            "description": {
              "content": "Health check endpoint to verify API is running",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ddea8fbc-c2e9-48df-af65-81c39717dad9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('status');",
                  "    pm.expect(responseJson).to.have.property('timestamp');",
                  "    pm.expect(responseJson).to.have.property('service');",
                  "});",
                  "",
                  "pm.test('Service status is ok', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.status).to.eql('ok');",
                  "});",
                  "",
                  "pm.test('Response time is less than 1000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "_lastExecutionId": "0af9e635-d48b-44ab-a9e6-bf09342a8eb2"
              }
            }
          ]
        },
        "parent": {
          "id": "f7ea9a98-1896-4eb1-a04f-fcc0a733588a",
          "name": "Health Check",
          "description": {
            "content": "Health monitoring endpoints",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d648d959-9a04-4d8a-9411-ca3af7aec461",
              "name": "Get Health Status",
              "request": {
                "description": {
                  "content": "Health check endpoint to verify API is running",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ddea8fbc-c2e9-48df-af65-81c39717dad9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct structure', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('status');",
                      "    pm.expect(responseJson).to.have.property('timestamp');",
                      "    pm.expect(responseJson).to.have.property('service');",
                      "});",
                      "",
                      "pm.test('Service status is ok', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.status).to.eql('ok');",
                      "});",
                      "",
                      "pm.test('Response time is less than 1000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});"
                    ],
                    "_lastExecutionId": "0af9e635-d48b-44ab-a9e6-bf09342a8eb2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 10,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b1bc8289-a059-4b55-984a-461f815c7676",
          "httpRequestId": "e9eb3da0-ff1c-449a-a067-b8d09d54753e",
          "scriptId": "ddea8fbc-c2e9-48df-af65-81c39717dad9",
          "execution": "0af9e635-d48b-44ab-a9e6-bf09342a8eb2"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response has correct structure",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:1)",
          "checksum": "0daab7d80dd9a414268cb5cb0e9ce648",
          "id": "b659f7b2-38bc-4d05-9663-eaa1b053561c",
          "timestamp": 1758971164525,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "d648d959-9a04-4d8a-9411-ca3af7aec461",
          "name": "Get Health Status",
          "request": {
            "description": {
              "content": "Health check endpoint to verify API is running",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ddea8fbc-c2e9-48df-af65-81c39717dad9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('status');",
                  "    pm.expect(responseJson).to.have.property('timestamp');",
                  "    pm.expect(responseJson).to.have.property('service');",
                  "});",
                  "",
                  "pm.test('Service status is ok', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.status).to.eql('ok');",
                  "});",
                  "",
                  "pm.test('Response time is less than 1000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "_lastExecutionId": "0af9e635-d48b-44ab-a9e6-bf09342a8eb2"
              }
            }
          ]
        },
        "parent": {
          "id": "f7ea9a98-1896-4eb1-a04f-fcc0a733588a",
          "name": "Health Check",
          "description": {
            "content": "Health monitoring endpoints",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d648d959-9a04-4d8a-9411-ca3af7aec461",
              "name": "Get Health Status",
              "request": {
                "description": {
                  "content": "Health check endpoint to verify API is running",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ddea8fbc-c2e9-48df-af65-81c39717dad9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct structure', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('status');",
                      "    pm.expect(responseJson).to.have.property('timestamp');",
                      "    pm.expect(responseJson).to.have.property('service');",
                      "});",
                      "",
                      "pm.test('Service status is ok', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.status).to.eql('ok');",
                      "});",
                      "",
                      "pm.test('Response time is less than 1000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});"
                    ],
                    "_lastExecutionId": "0af9e635-d48b-44ab-a9e6-bf09342a8eb2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 10,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b1bc8289-a059-4b55-984a-461f815c7676",
          "httpRequestId": "e9eb3da0-ff1c-449a-a067-b8d09d54753e",
          "scriptId": "ddea8fbc-c2e9-48df-af65-81c39717dad9",
          "execution": "0af9e635-d48b-44ab-a9e6-bf09342a8eb2"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "Service status is ok",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:1)",
          "checksum": "a1b04976618678828a1c7180f1c50153",
          "id": "554b3518-157f-4510-a965-54fff9961e61",
          "timestamp": 1758971164526,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "d648d959-9a04-4d8a-9411-ca3af7aec461",
          "name": "Get Health Status",
          "request": {
            "description": {
              "content": "Health check endpoint to verify API is running",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ddea8fbc-c2e9-48df-af65-81c39717dad9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('status');",
                  "    pm.expect(responseJson).to.have.property('timestamp');",
                  "    pm.expect(responseJson).to.have.property('service');",
                  "});",
                  "",
                  "pm.test('Service status is ok', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.status).to.eql('ok');",
                  "});",
                  "",
                  "pm.test('Response time is less than 1000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "_lastExecutionId": "0af9e635-d48b-44ab-a9e6-bf09342a8eb2"
              }
            }
          ]
        },
        "parent": {
          "id": "f7ea9a98-1896-4eb1-a04f-fcc0a733588a",
          "name": "Health Check",
          "description": {
            "content": "Health monitoring endpoints",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d648d959-9a04-4d8a-9411-ca3af7aec461",
              "name": "Get Health Status",
              "request": {
                "description": {
                  "content": "Health check endpoint to verify API is running",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ddea8fbc-c2e9-48df-af65-81c39717dad9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct structure', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('status');",
                      "    pm.expect(responseJson).to.have.property('timestamp');",
                      "    pm.expect(responseJson).to.have.property('service');",
                      "});",
                      "",
                      "pm.test('Service status is ok', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.status).to.eql('ok');",
                      "});",
                      "",
                      "pm.test('Response time is less than 1000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});"
                    ],
                    "_lastExecutionId": "0af9e635-d48b-44ab-a9e6-bf09342a8eb2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 10,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b1bc8289-a059-4b55-984a-461f815c7676",
          "httpRequestId": "e9eb3da0-ff1c-449a-a067-b8d09d54753e",
          "scriptId": "ddea8fbc-c2e9-48df-af65-81c39717dad9",
          "execution": "0af9e635-d48b-44ab-a9e6-bf09342a8eb2"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Response time is less than 1000ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:4:1)",
          "checksum": "50d2f1b70ddeeb4cf3a77dec8efde145",
          "id": "ba88b357-0e26-40f5-9efd-e66b0df61756",
          "timestamp": 1758971164527,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "d648d959-9a04-4d8a-9411-ca3af7aec461",
          "name": "Get Health Status",
          "request": {
            "description": {
              "content": "Health check endpoint to verify API is running",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ddea8fbc-c2e9-48df-af65-81c39717dad9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('status');",
                  "    pm.expect(responseJson).to.have.property('timestamp');",
                  "    pm.expect(responseJson).to.have.property('service');",
                  "});",
                  "",
                  "pm.test('Service status is ok', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.status).to.eql('ok');",
                  "});",
                  "",
                  "pm.test('Response time is less than 1000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "_lastExecutionId": "0af9e635-d48b-44ab-a9e6-bf09342a8eb2"
              }
            }
          ]
        },
        "parent": {
          "id": "f7ea9a98-1896-4eb1-a04f-fcc0a733588a",
          "name": "Health Check",
          "description": {
            "content": "Health monitoring endpoints",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d648d959-9a04-4d8a-9411-ca3af7aec461",
              "name": "Get Health Status",
              "request": {
                "description": {
                  "content": "Health check endpoint to verify API is running",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ddea8fbc-c2e9-48df-af65-81c39717dad9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct structure', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('status');",
                      "    pm.expect(responseJson).to.have.property('timestamp');",
                      "    pm.expect(responseJson).to.have.property('service');",
                      "});",
                      "",
                      "pm.test('Service status is ok', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.status).to.eql('ok');",
                      "});",
                      "",
                      "pm.test('Response time is less than 1000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});"
                    ],
                    "_lastExecutionId": "0af9e635-d48b-44ab-a9e6-bf09342a8eb2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 10,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b1bc8289-a059-4b55-984a-461f815c7676",
          "httpRequestId": "e9eb3da0-ff1c-449a-a067-b8d09d54753e",
          "scriptId": "ddea8fbc-c2e9-48df-af65-81c39717dad9",
          "execution": "0af9e635-d48b-44ab-a9e6-bf09342a8eb2"
        }
      },
      {
        "error": {
          "code": "ERR_INVALID_IP_ADDRESS",
          "name": "TypeError",
          "message": "Invalid IP address: undefined",
          "stack": "TypeError [ERR_INVALID_IP_ADDRESS]: Invalid IP address: undefined\n    at emitLookup (node:net:1492:17)\n    at C:\\Dev's Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js:303:31\n    at Socket.done (C:\\Dev's Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js:254:21)\n    at Object.onceWrapper (node:events:633:26)\n    at Socket.emit (node:events:518:28)\n    at emitErrorNT (node:internal/streams/destroy:170:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:129:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)",
          "checksum": "7e04c003ff769fda9c017ef6fec24090",
          "id": "ed040fda-c7d9-4edb-bc46-e585a8f27f7e",
          "timestamp": 1758971164609,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1492,
              "functionName": "emitLookup",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 17,
              "native": false
            },
            {
              "fileName": "Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js",
              "lineNumber": 303,
              "functionName": "C:\\Dev's",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js",
              "lineNumber": 254,
              "functionName": "Socket.done (C:\\Dev's",
              "typeName": "Socket",
              "methodName": "done (C:\\Dev's",
              "columnNumber": 21,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 633,
              "functionName": "Object.onceWrapper",
              "typeName": "Object",
              "methodName": "onceWrapper",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 518,
              "functionName": "Socket.emit",
              "typeName": "Socket",
              "methodName": "emit",
              "columnNumber": 28,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 170,
              "functionName": "emitErrorNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 129,
              "functionName": "emitErrorCloseNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 3,
              "native": false
            },
            {
              "fileName": "node:internal/process/task_queues",
              "lineNumber": 90,
              "functionName": "process.processTicksAndRejections",
              "typeName": "process",
              "methodName": "processTicksAndRejections",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "267991b6-62ab-41c6-9bf9-fbaa777cb6b3",
          "name": "Get Prometheus Metrics",
          "request": {
            "description": {
              "content": "Prometheus metrics endpoint",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "metrics"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f9d6fead-2b0b-44f0-9369-30ecbdcf8b52",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Content-Type is text/plain', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');",
                  "});",
                  "",
                  "pm.test('Response contains metrics data', function () {",
                  "    pm.expect(pm.response.text()).to.include('http_requests_total');",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "_lastExecutionId": "22689c6c-86b6-486e-8f1a-3ed4bdaf72f1"
              }
            }
          ]
        },
        "parent": {
          "id": "460d2fff-9903-49d8-bbf5-609db3637a00",
          "name": "Metrics",
          "description": {
            "content": "Application metrics endpoints",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "267991b6-62ab-41c6-9bf9-fbaa777cb6b3",
              "name": "Get Prometheus Metrics",
              "request": {
                "description": {
                  "content": "Prometheus metrics endpoint",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "metrics"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f9d6fead-2b0b-44f0-9369-30ecbdcf8b52",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Content-Type is text/plain', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');",
                      "});",
                      "",
                      "pm.test('Response contains metrics data', function () {",
                      "    pm.expect(pm.response.text()).to.include('http_requests_total');",
                      "});",
                      "",
                      "pm.test('Response time is less than 2000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});"
                    ],
                    "_lastExecutionId": "22689c6c-86b6-486e-8f1a-3ed4bdaf72f1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "22c66f2b-83c4-4abf-9985-3edbccaf17bb",
          "length": 10,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d5a1e953-a92a-438e-9e04-b2d9b0c2ec8c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected { Object (id, _details, ...) } to have property 'code'",
          "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "a412680c8047933fc8ce5a913f89c3c2",
          "id": "2b07cfdc-4fbf-4366-a7c8-0d2a9e07f6fb",
          "timestamp": 1758971164627,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "267991b6-62ab-41c6-9bf9-fbaa777cb6b3",
          "name": "Get Prometheus Metrics",
          "request": {
            "description": {
              "content": "Prometheus metrics endpoint",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "metrics"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f9d6fead-2b0b-44f0-9369-30ecbdcf8b52",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Content-Type is text/plain', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');",
                  "});",
                  "",
                  "pm.test('Response contains metrics data', function () {",
                  "    pm.expect(pm.response.text()).to.include('http_requests_total');",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "_lastExecutionId": "22689c6c-86b6-486e-8f1a-3ed4bdaf72f1"
              }
            }
          ]
        },
        "parent": {
          "id": "460d2fff-9903-49d8-bbf5-609db3637a00",
          "name": "Metrics",
          "description": {
            "content": "Application metrics endpoints",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "267991b6-62ab-41c6-9bf9-fbaa777cb6b3",
              "name": "Get Prometheus Metrics",
              "request": {
                "description": {
                  "content": "Prometheus metrics endpoint",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "metrics"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f9d6fead-2b0b-44f0-9369-30ecbdcf8b52",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Content-Type is text/plain', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');",
                      "});",
                      "",
                      "pm.test('Response contains metrics data', function () {",
                      "    pm.expect(pm.response.text()).to.include('http_requests_total');",
                      "});",
                      "",
                      "pm.test('Response time is less than 2000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});"
                    ],
                    "_lastExecutionId": "22689c6c-86b6-486e-8f1a-3ed4bdaf72f1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "22c66f2b-83c4-4abf-9985-3edbccaf17bb",
          "length": 10,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d5a1e953-a92a-438e-9e04-b2d9b0c2ec8c",
          "scriptId": "f9d6fead-2b0b-44f0-9369-30ecbdcf8b52",
          "execution": "22689c6c-86b6-486e-8f1a-3ed4bdaf72f1"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Content-Type is text/plain",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:2)",
          "checksum": "4c8ce352eda84b8538c2b8c923d11ce0",
          "id": "dbbb9a08-86d9-454c-9acb-4f18bdb1d04c",
          "timestamp": 1758971164628,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "267991b6-62ab-41c6-9bf9-fbaa777cb6b3",
          "name": "Get Prometheus Metrics",
          "request": {
            "description": {
              "content": "Prometheus metrics endpoint",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "metrics"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f9d6fead-2b0b-44f0-9369-30ecbdcf8b52",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Content-Type is text/plain', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');",
                  "});",
                  "",
                  "pm.test('Response contains metrics data', function () {",
                  "    pm.expect(pm.response.text()).to.include('http_requests_total');",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "_lastExecutionId": "22689c6c-86b6-486e-8f1a-3ed4bdaf72f1"
              }
            }
          ]
        },
        "parent": {
          "id": "460d2fff-9903-49d8-bbf5-609db3637a00",
          "name": "Metrics",
          "description": {
            "content": "Application metrics endpoints",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "267991b6-62ab-41c6-9bf9-fbaa777cb6b3",
              "name": "Get Prometheus Metrics",
              "request": {
                "description": {
                  "content": "Prometheus metrics endpoint",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "metrics"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f9d6fead-2b0b-44f0-9369-30ecbdcf8b52",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Content-Type is text/plain', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');",
                      "});",
                      "",
                      "pm.test('Response contains metrics data', function () {",
                      "    pm.expect(pm.response.text()).to.include('http_requests_total');",
                      "});",
                      "",
                      "pm.test('Response time is less than 2000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});"
                    ],
                    "_lastExecutionId": "22689c6c-86b6-486e-8f1a-3ed4bdaf72f1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "22c66f2b-83c4-4abf-9985-3edbccaf17bb",
          "length": 10,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d5a1e953-a92a-438e-9e04-b2d9b0c2ec8c",
          "scriptId": "f9d6fead-2b0b-44f0-9369-30ecbdcf8b52",
          "execution": "22689c6c-86b6-486e-8f1a-3ed4bdaf72f1"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response contains metrics data",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:2)",
          "checksum": "5938d501e7e7f4eb15910e50513eda7a",
          "id": "a2741283-0dcd-46af-a82a-d27cfc7dc0ce",
          "timestamp": 1758971164629,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "267991b6-62ab-41c6-9bf9-fbaa777cb6b3",
          "name": "Get Prometheus Metrics",
          "request": {
            "description": {
              "content": "Prometheus metrics endpoint",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "metrics"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f9d6fead-2b0b-44f0-9369-30ecbdcf8b52",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Content-Type is text/plain', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');",
                  "});",
                  "",
                  "pm.test('Response contains metrics data', function () {",
                  "    pm.expect(pm.response.text()).to.include('http_requests_total');",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "_lastExecutionId": "22689c6c-86b6-486e-8f1a-3ed4bdaf72f1"
              }
            }
          ]
        },
        "parent": {
          "id": "460d2fff-9903-49d8-bbf5-609db3637a00",
          "name": "Metrics",
          "description": {
            "content": "Application metrics endpoints",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "267991b6-62ab-41c6-9bf9-fbaa777cb6b3",
              "name": "Get Prometheus Metrics",
              "request": {
                "description": {
                  "content": "Prometheus metrics endpoint",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "metrics"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f9d6fead-2b0b-44f0-9369-30ecbdcf8b52",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Content-Type is text/plain', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');",
                      "});",
                      "",
                      "pm.test('Response contains metrics data', function () {",
                      "    pm.expect(pm.response.text()).to.include('http_requests_total');",
                      "});",
                      "",
                      "pm.test('Response time is less than 2000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});"
                    ],
                    "_lastExecutionId": "22689c6c-86b6-486e-8f1a-3ed4bdaf72f1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "22c66f2b-83c4-4abf-9985-3edbccaf17bb",
          "length": 10,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d5a1e953-a92a-438e-9e04-b2d9b0c2ec8c",
          "scriptId": "f9d6fead-2b0b-44f0-9369-30ecbdcf8b52",
          "execution": "22689c6c-86b6-486e-8f1a-3ed4bdaf72f1"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Response time is less than 2000ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:4:2)",
          "checksum": "5bf18df9abf2d92cf8d1e822fcc54d3e",
          "id": "f1df64ac-579a-483b-b505-54ec42a46cfc",
          "timestamp": 1758971164630,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "267991b6-62ab-41c6-9bf9-fbaa777cb6b3",
          "name": "Get Prometheus Metrics",
          "request": {
            "description": {
              "content": "Prometheus metrics endpoint",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "metrics"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f9d6fead-2b0b-44f0-9369-30ecbdcf8b52",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Content-Type is text/plain', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');",
                  "});",
                  "",
                  "pm.test('Response contains metrics data', function () {",
                  "    pm.expect(pm.response.text()).to.include('http_requests_total');",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "_lastExecutionId": "22689c6c-86b6-486e-8f1a-3ed4bdaf72f1"
              }
            }
          ]
        },
        "parent": {
          "id": "460d2fff-9903-49d8-bbf5-609db3637a00",
          "name": "Metrics",
          "description": {
            "content": "Application metrics endpoints",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "267991b6-62ab-41c6-9bf9-fbaa777cb6b3",
              "name": "Get Prometheus Metrics",
              "request": {
                "description": {
                  "content": "Prometheus metrics endpoint",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "metrics"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f9d6fead-2b0b-44f0-9369-30ecbdcf8b52",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Content-Type is text/plain', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');",
                      "});",
                      "",
                      "pm.test('Response contains metrics data', function () {",
                      "    pm.expect(pm.response.text()).to.include('http_requests_total');",
                      "});",
                      "",
                      "pm.test('Response time is less than 2000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});"
                    ],
                    "_lastExecutionId": "22689c6c-86b6-486e-8f1a-3ed4bdaf72f1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "22c66f2b-83c4-4abf-9985-3edbccaf17bb",
          "length": 10,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d5a1e953-a92a-438e-9e04-b2d9b0c2ec8c",
          "scriptId": "f9d6fead-2b0b-44f0-9369-30ecbdcf8b52",
          "execution": "22689c6c-86b6-486e-8f1a-3ed4bdaf72f1"
        }
      },
      {
        "error": {
          "code": "ERR_INVALID_IP_ADDRESS",
          "name": "TypeError",
          "message": "Invalid IP address: undefined",
          "stack": "TypeError [ERR_INVALID_IP_ADDRESS]: Invalid IP address: undefined\n    at emitLookup (node:net:1492:17)\n    at C:\\Dev's Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js:303:31\n    at Socket.done (C:\\Dev's Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js:254:21)\n    at Object.onceWrapper (node:events:633:26)\n    at Socket.emit (node:events:518:28)\n    at emitErrorNT (node:internal/streams/destroy:170:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:129:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)",
          "checksum": "7e04c003ff769fda9c017ef6fec24090",
          "id": "f3d7b4a2-b8a2-4592-87b8-e58c5226c457",
          "timestamp": 1758971164691,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1492,
              "functionName": "emitLookup",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 17,
              "native": false
            },
            {
              "fileName": "Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js",
              "lineNumber": 303,
              "functionName": "C:\\Dev's",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js",
              "lineNumber": 254,
              "functionName": "Socket.done (C:\\Dev's",
              "typeName": "Socket",
              "methodName": "done (C:\\Dev's",
              "columnNumber": 21,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 633,
              "functionName": "Object.onceWrapper",
              "typeName": "Object",
              "methodName": "onceWrapper",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 518,
              "functionName": "Socket.emit",
              "typeName": "Socket",
              "methodName": "emit",
              "columnNumber": 28,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 170,
              "functionName": "emitErrorNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 129,
              "functionName": "emitErrorCloseNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 3,
              "native": false
            },
            {
              "fileName": "node:internal/process/task_queues",
              "lineNumber": 90,
              "functionName": "process.processTicksAndRejections",
              "typeName": "process",
              "methodName": "processTicksAndRejections",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "58b132b3-bb19-41df-a453-e6b32822ae02",
          "name": "Get All Apps",
          "request": {
            "description": {
              "content": "Get all apps for authenticated user",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "apps"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d8865627-1696-4cb7-b46e-0c81dbf398ac",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200 or 401', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response has data property', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('data');",
                  "        pm.expect(responseJson.data).to.be.an('array');",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    pm.test('Unauthorized response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "}",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "5e469a43-8eab-49a3-85e4-8dd7dcbf3e2b"
              }
            }
          ]
        },
        "parent": {
          "id": "cf7761f7-0711-4c45-9f7f-b2f5d8b5c432",
          "name": "Apps Management",
          "description": {
            "content": "Apps CRUD operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "58b132b3-bb19-41df-a453-e6b32822ae02",
              "name": "Get All Apps",
              "request": {
                "description": {
                  "content": "Get all apps for authenticated user",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d8865627-1696-4cb7-b46e-0c81dbf398ac",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.be.an('array');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "5e469a43-8eab-49a3-85e4-8dd7dcbf3e2b"
                  }
                }
              ]
            },
            {
              "id": "4323e29f-6357-4124-af93-532f208cd262",
              "name": "Create New App",
              "request": {
                "description": {
                  "content": "Create a new app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test API App\",\n  \"html\": \"<h1>Test App</h1>\",\n  \"css\": \"h1 { color: blue; }\",\n  \"js\": \"console.log('Test app loaded');\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "db8b02aa-565c-4246-a65a-d9848e21b74d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "        ",
                      "        // Store app ID for subsequent tests",
                      "        pm.collectionVariables.set('test_app_id', responseJson.data.id);",
                      "    });",
                      "    ",
                      "    pm.test('App name matches request', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson.data.name).to.eql('Test API App');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "78ada079-b145-4c01-82c4-01e187991d14"
                  }
                }
              ]
            },
            {
              "id": "d3decd0a-7499-4bb0-ad79-82e60fdeb083",
              "name": "Get App by ID",
              "request": {
                "description": {
                  "content": "Get specific app by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "61e09f4b-cf49-4384-ae6a-2363eda2b308",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 404) {",
                      "    pm.test('Not found response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "b785828b-9c37-428d-b9fa-0214458364d6"
                  }
                }
              ]
            },
            {
              "id": "609a886d-cd93-4c21-95dd-74ae032bcbeb",
              "name": "Update App",
              "request": {
                "description": {
                  "content": "Update an existing app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}",
                    "update"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test API App\",\n  \"html\": \"<h1>Updated Test App</h1>\",\n  \"css\": \"h1 { color: red; }\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "96bea0cd-f28a-47e5-8f2e-b6e72674b2ca",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "    });",
                      "    ",
                      "    pm.test('App name was updated', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson.data.name).to.eql('Updated Test API App');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 404) {",
                      "    pm.test('Not found response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "df9bb3a7-994a-42ca-bf29-25f72a2c917e"
                  }
                }
              ]
            },
            {
              "id": "7662d72a-bf0c-43d2-b9c4-82910a22700f",
              "name": "Delete App",
              "request": {
                "description": {
                  "content": "Delete an app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}",
                    "delete"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "07204f5b-3b71-4fa5-bd70-f5dd1d716405",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 500', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 500]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has success message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('message');",
                      "        pm.expect(responseJson.message).to.include('deleted');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 500) {",
                      "    pm.test('Server error response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "6d315dab-9d38-46bd-bbd3-ef9bad017ae2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "339c91eb-f08f-4eed-a4d5-8713313cc252",
          "length": 10,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a39edbe0-91a0-4f7d-aa3e-f2e0133f5c3a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200 or 401",
          "message": "expected undefined to be one of [ 200, 401 ]",
          "stack": "AssertionError: expected undefined to be one of [ 200, 401 ]\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "a9942f145c7d28ad340031ba8dd60c4f",
          "id": "6e8ac028-9a46-4ba1-9d12-be300e2b5c41",
          "timestamp": 1758971164710,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "58b132b3-bb19-41df-a453-e6b32822ae02",
          "name": "Get All Apps",
          "request": {
            "description": {
              "content": "Get all apps for authenticated user",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "apps"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d8865627-1696-4cb7-b46e-0c81dbf398ac",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200 or 401', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response has data property', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('data');",
                  "        pm.expect(responseJson.data).to.be.an('array');",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    pm.test('Unauthorized response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "}",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "5e469a43-8eab-49a3-85e4-8dd7dcbf3e2b"
              }
            }
          ]
        },
        "parent": {
          "id": "cf7761f7-0711-4c45-9f7f-b2f5d8b5c432",
          "name": "Apps Management",
          "description": {
            "content": "Apps CRUD operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "58b132b3-bb19-41df-a453-e6b32822ae02",
              "name": "Get All Apps",
              "request": {
                "description": {
                  "content": "Get all apps for authenticated user",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d8865627-1696-4cb7-b46e-0c81dbf398ac",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.be.an('array');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "5e469a43-8eab-49a3-85e4-8dd7dcbf3e2b"
                  }
                }
              ]
            },
            {
              "id": "4323e29f-6357-4124-af93-532f208cd262",
              "name": "Create New App",
              "request": {
                "description": {
                  "content": "Create a new app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test API App\",\n  \"html\": \"<h1>Test App</h1>\",\n  \"css\": \"h1 { color: blue; }\",\n  \"js\": \"console.log('Test app loaded');\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "db8b02aa-565c-4246-a65a-d9848e21b74d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "        ",
                      "        // Store app ID for subsequent tests",
                      "        pm.collectionVariables.set('test_app_id', responseJson.data.id);",
                      "    });",
                      "    ",
                      "    pm.test('App name matches request', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson.data.name).to.eql('Test API App');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "78ada079-b145-4c01-82c4-01e187991d14"
                  }
                }
              ]
            },
            {
              "id": "d3decd0a-7499-4bb0-ad79-82e60fdeb083",
              "name": "Get App by ID",
              "request": {
                "description": {
                  "content": "Get specific app by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "61e09f4b-cf49-4384-ae6a-2363eda2b308",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 404) {",
                      "    pm.test('Not found response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "b785828b-9c37-428d-b9fa-0214458364d6"
                  }
                }
              ]
            },
            {
              "id": "609a886d-cd93-4c21-95dd-74ae032bcbeb",
              "name": "Update App",
              "request": {
                "description": {
                  "content": "Update an existing app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}",
                    "update"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test API App\",\n  \"html\": \"<h1>Updated Test App</h1>\",\n  \"css\": \"h1 { color: red; }\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "96bea0cd-f28a-47e5-8f2e-b6e72674b2ca",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "    });",
                      "    ",
                      "    pm.test('App name was updated', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson.data.name).to.eql('Updated Test API App');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 404) {",
                      "    pm.test('Not found response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "df9bb3a7-994a-42ca-bf29-25f72a2c917e"
                  }
                }
              ]
            },
            {
              "id": "7662d72a-bf0c-43d2-b9c4-82910a22700f",
              "name": "Delete App",
              "request": {
                "description": {
                  "content": "Delete an app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}",
                    "delete"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "07204f5b-3b71-4fa5-bd70-f5dd1d716405",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 500', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 500]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has success message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('message');",
                      "        pm.expect(responseJson.message).to.include('deleted');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 500) {",
                      "    pm.test('Server error response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "6d315dab-9d38-46bd-bbd3-ef9bad017ae2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "339c91eb-f08f-4eed-a4d5-8713313cc252",
          "length": 10,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a39edbe0-91a0-4f7d-aa3e-f2e0133f5c3a",
          "scriptId": "d8865627-1696-4cb7-b46e-0c81dbf398ac",
          "execution": "5e469a43-8eab-49a3-85e4-8dd7dcbf3e2b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time is less than 3000ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:3)",
          "checksum": "b02330fa9bd5f1627043791bc211d946",
          "id": "bedbe119-f38b-4b75-a533-42a7f8eef4ed",
          "timestamp": 1758971164711,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "58b132b3-bb19-41df-a453-e6b32822ae02",
          "name": "Get All Apps",
          "request": {
            "description": {
              "content": "Get all apps for authenticated user",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "apps"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d8865627-1696-4cb7-b46e-0c81dbf398ac",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200 or 401', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response has data property', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('data');",
                  "        pm.expect(responseJson.data).to.be.an('array');",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    pm.test('Unauthorized response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "}",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "5e469a43-8eab-49a3-85e4-8dd7dcbf3e2b"
              }
            }
          ]
        },
        "parent": {
          "id": "cf7761f7-0711-4c45-9f7f-b2f5d8b5c432",
          "name": "Apps Management",
          "description": {
            "content": "Apps CRUD operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "58b132b3-bb19-41df-a453-e6b32822ae02",
              "name": "Get All Apps",
              "request": {
                "description": {
                  "content": "Get all apps for authenticated user",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d8865627-1696-4cb7-b46e-0c81dbf398ac",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.be.an('array');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "5e469a43-8eab-49a3-85e4-8dd7dcbf3e2b"
                  }
                }
              ]
            },
            {
              "id": "4323e29f-6357-4124-af93-532f208cd262",
              "name": "Create New App",
              "request": {
                "description": {
                  "content": "Create a new app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test API App\",\n  \"html\": \"<h1>Test App</h1>\",\n  \"css\": \"h1 { color: blue; }\",\n  \"js\": \"console.log('Test app loaded');\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "db8b02aa-565c-4246-a65a-d9848e21b74d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "        ",
                      "        // Store app ID for subsequent tests",
                      "        pm.collectionVariables.set('test_app_id', responseJson.data.id);",
                      "    });",
                      "    ",
                      "    pm.test('App name matches request', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson.data.name).to.eql('Test API App');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "78ada079-b145-4c01-82c4-01e187991d14"
                  }
                }
              ]
            },
            {
              "id": "d3decd0a-7499-4bb0-ad79-82e60fdeb083",
              "name": "Get App by ID",
              "request": {
                "description": {
                  "content": "Get specific app by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "61e09f4b-cf49-4384-ae6a-2363eda2b308",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 404) {",
                      "    pm.test('Not found response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "b785828b-9c37-428d-b9fa-0214458364d6"
                  }
                }
              ]
            },
            {
              "id": "609a886d-cd93-4c21-95dd-74ae032bcbeb",
              "name": "Update App",
              "request": {
                "description": {
                  "content": "Update an existing app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}",
                    "update"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test API App\",\n  \"html\": \"<h1>Updated Test App</h1>\",\n  \"css\": \"h1 { color: red; }\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "96bea0cd-f28a-47e5-8f2e-b6e72674b2ca",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "    });",
                      "    ",
                      "    pm.test('App name was updated', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson.data.name).to.eql('Updated Test API App');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 404) {",
                      "    pm.test('Not found response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "df9bb3a7-994a-42ca-bf29-25f72a2c917e"
                  }
                }
              ]
            },
            {
              "id": "7662d72a-bf0c-43d2-b9c4-82910a22700f",
              "name": "Delete App",
              "request": {
                "description": {
                  "content": "Delete an app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}",
                    "delete"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "07204f5b-3b71-4fa5-bd70-f5dd1d716405",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 500', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 500]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has success message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('message');",
                      "        pm.expect(responseJson.message).to.include('deleted');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 500) {",
                      "    pm.test('Server error response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "6d315dab-9d38-46bd-bbd3-ef9bad017ae2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "339c91eb-f08f-4eed-a4d5-8713313cc252",
          "length": 10,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a39edbe0-91a0-4f7d-aa3e-f2e0133f5c3a",
          "scriptId": "d8865627-1696-4cb7-b46e-0c81dbf398ac",
          "execution": "5e469a43-8eab-49a3-85e4-8dd7dcbf3e2b"
        }
      },
      {
        "error": {
          "code": "ERR_INVALID_IP_ADDRESS",
          "name": "TypeError",
          "message": "Invalid IP address: undefined",
          "stack": "TypeError [ERR_INVALID_IP_ADDRESS]: Invalid IP address: undefined\n    at emitLookup (node:net:1492:17)\n    at C:\\Dev's Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js:303:31\n    at Socket.done (C:\\Dev's Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js:254:21)\n    at Object.onceWrapper (node:events:633:26)\n    at Socket.emit (node:events:518:28)\n    at emitErrorNT (node:internal/streams/destroy:170:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:129:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)",
          "checksum": "7e04c003ff769fda9c017ef6fec24090",
          "id": "8a02cc85-49b8-43f9-8304-85f55670912a",
          "timestamp": 1758971164796,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1492,
              "functionName": "emitLookup",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 17,
              "native": false
            },
            {
              "fileName": "Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js",
              "lineNumber": 303,
              "functionName": "C:\\Dev's",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js",
              "lineNumber": 254,
              "functionName": "Socket.done (C:\\Dev's",
              "typeName": "Socket",
              "methodName": "done (C:\\Dev's",
              "columnNumber": 21,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 633,
              "functionName": "Object.onceWrapper",
              "typeName": "Object",
              "methodName": "onceWrapper",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 518,
              "functionName": "Socket.emit",
              "typeName": "Socket",
              "methodName": "emit",
              "columnNumber": 28,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 170,
              "functionName": "emitErrorNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 129,
              "functionName": "emitErrorCloseNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 3,
              "native": false
            },
            {
              "fileName": "node:internal/process/task_queues",
              "lineNumber": 90,
              "functionName": "process.processTicksAndRejections",
              "typeName": "process",
              "methodName": "processTicksAndRejections",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "4323e29f-6357-4124-af93-532f208cd262",
          "name": "Create New App",
          "request": {
            "description": {
              "content": "Create a new app",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "apps",
                "create"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test API App\",\n  \"html\": \"<h1>Test App</h1>\",\n  \"css\": \"h1 { color: blue; }\",\n  \"js\": \"console.log('Test app loaded');\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "db8b02aa-565c-4246-a65a-d9848e21b74d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201 or 401', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([201, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    pm.test('Response has data property', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('data');",
                  "        pm.expect(responseJson.data).to.have.property('id');",
                  "        pm.expect(responseJson.data).to.have.property('name');",
                  "        ",
                  "        // Store app ID for subsequent tests",
                  "        pm.collectionVariables.set('test_app_id', responseJson.data.id);",
                  "    });",
                  "    ",
                  "    pm.test('App name matches request', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson.data.name).to.eql('Test API App');",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    pm.test('Unauthorized response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "}",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "78ada079-b145-4c01-82c4-01e187991d14"
              }
            }
          ]
        },
        "parent": {
          "id": "cf7761f7-0711-4c45-9f7f-b2f5d8b5c432",
          "name": "Apps Management",
          "description": {
            "content": "Apps CRUD operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "58b132b3-bb19-41df-a453-e6b32822ae02",
              "name": "Get All Apps",
              "request": {
                "description": {
                  "content": "Get all apps for authenticated user",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d8865627-1696-4cb7-b46e-0c81dbf398ac",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.be.an('array');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "5e469a43-8eab-49a3-85e4-8dd7dcbf3e2b"
                  }
                }
              ]
            },
            {
              "id": "4323e29f-6357-4124-af93-532f208cd262",
              "name": "Create New App",
              "request": {
                "description": {
                  "content": "Create a new app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test API App\",\n  \"html\": \"<h1>Test App</h1>\",\n  \"css\": \"h1 { color: blue; }\",\n  \"js\": \"console.log('Test app loaded');\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "db8b02aa-565c-4246-a65a-d9848e21b74d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "        ",
                      "        // Store app ID for subsequent tests",
                      "        pm.collectionVariables.set('test_app_id', responseJson.data.id);",
                      "    });",
                      "    ",
                      "    pm.test('App name matches request', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson.data.name).to.eql('Test API App');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "78ada079-b145-4c01-82c4-01e187991d14"
                  }
                }
              ]
            },
            {
              "id": "d3decd0a-7499-4bb0-ad79-82e60fdeb083",
              "name": "Get App by ID",
              "request": {
                "description": {
                  "content": "Get specific app by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "61e09f4b-cf49-4384-ae6a-2363eda2b308",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 404) {",
                      "    pm.test('Not found response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "b785828b-9c37-428d-b9fa-0214458364d6"
                  }
                }
              ]
            },
            {
              "id": "609a886d-cd93-4c21-95dd-74ae032bcbeb",
              "name": "Update App",
              "request": {
                "description": {
                  "content": "Update an existing app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}",
                    "update"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test API App\",\n  \"html\": \"<h1>Updated Test App</h1>\",\n  \"css\": \"h1 { color: red; }\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "96bea0cd-f28a-47e5-8f2e-b6e72674b2ca",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "    });",
                      "    ",
                      "    pm.test('App name was updated', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson.data.name).to.eql('Updated Test API App');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 404) {",
                      "    pm.test('Not found response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "df9bb3a7-994a-42ca-bf29-25f72a2c917e"
                  }
                }
              ]
            },
            {
              "id": "7662d72a-bf0c-43d2-b9c4-82910a22700f",
              "name": "Delete App",
              "request": {
                "description": {
                  "content": "Delete an app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}",
                    "delete"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "07204f5b-3b71-4fa5-bd70-f5dd1d716405",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 500', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 500]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has success message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('message');",
                      "        pm.expect(responseJson.message).to.include('deleted');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 500) {",
                      "    pm.test('Server error response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "6d315dab-9d38-46bd-bbd3-ef9bad017ae2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "467dbd0e-a6e5-43b8-b6f5-f840ea8a3bf3",
          "length": 10,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "022c2f5f-921d-4181-929e-4495e7b97d22"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 201 or 401",
          "message": "expected undefined to be one of [ 201, 401 ]",
          "stack": "AssertionError: expected undefined to be one of [ 201, 401 ]\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "9a1c2e35acde09e42ddbc04f2d0b7ca0",
          "id": "aafbbcb1-9065-4319-9ab5-36e56317e4b2",
          "timestamp": 1758971164809,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "4323e29f-6357-4124-af93-532f208cd262",
          "name": "Create New App",
          "request": {
            "description": {
              "content": "Create a new app",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "apps",
                "create"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test API App\",\n  \"html\": \"<h1>Test App</h1>\",\n  \"css\": \"h1 { color: blue; }\",\n  \"js\": \"console.log('Test app loaded');\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "db8b02aa-565c-4246-a65a-d9848e21b74d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201 or 401', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([201, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    pm.test('Response has data property', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('data');",
                  "        pm.expect(responseJson.data).to.have.property('id');",
                  "        pm.expect(responseJson.data).to.have.property('name');",
                  "        ",
                  "        // Store app ID for subsequent tests",
                  "        pm.collectionVariables.set('test_app_id', responseJson.data.id);",
                  "    });",
                  "    ",
                  "    pm.test('App name matches request', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson.data.name).to.eql('Test API App');",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    pm.test('Unauthorized response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "}",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "78ada079-b145-4c01-82c4-01e187991d14"
              }
            }
          ]
        },
        "parent": {
          "id": "cf7761f7-0711-4c45-9f7f-b2f5d8b5c432",
          "name": "Apps Management",
          "description": {
            "content": "Apps CRUD operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "58b132b3-bb19-41df-a453-e6b32822ae02",
              "name": "Get All Apps",
              "request": {
                "description": {
                  "content": "Get all apps for authenticated user",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d8865627-1696-4cb7-b46e-0c81dbf398ac",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.be.an('array');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "5e469a43-8eab-49a3-85e4-8dd7dcbf3e2b"
                  }
                }
              ]
            },
            {
              "id": "4323e29f-6357-4124-af93-532f208cd262",
              "name": "Create New App",
              "request": {
                "description": {
                  "content": "Create a new app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test API App\",\n  \"html\": \"<h1>Test App</h1>\",\n  \"css\": \"h1 { color: blue; }\",\n  \"js\": \"console.log('Test app loaded');\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "db8b02aa-565c-4246-a65a-d9848e21b74d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "        ",
                      "        // Store app ID for subsequent tests",
                      "        pm.collectionVariables.set('test_app_id', responseJson.data.id);",
                      "    });",
                      "    ",
                      "    pm.test('App name matches request', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson.data.name).to.eql('Test API App');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "78ada079-b145-4c01-82c4-01e187991d14"
                  }
                }
              ]
            },
            {
              "id": "d3decd0a-7499-4bb0-ad79-82e60fdeb083",
              "name": "Get App by ID",
              "request": {
                "description": {
                  "content": "Get specific app by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "61e09f4b-cf49-4384-ae6a-2363eda2b308",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 404) {",
                      "    pm.test('Not found response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "b785828b-9c37-428d-b9fa-0214458364d6"
                  }
                }
              ]
            },
            {
              "id": "609a886d-cd93-4c21-95dd-74ae032bcbeb",
              "name": "Update App",
              "request": {
                "description": {
                  "content": "Update an existing app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}",
                    "update"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test API App\",\n  \"html\": \"<h1>Updated Test App</h1>\",\n  \"css\": \"h1 { color: red; }\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "96bea0cd-f28a-47e5-8f2e-b6e72674b2ca",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "    });",
                      "    ",
                      "    pm.test('App name was updated', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson.data.name).to.eql('Updated Test API App');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 404) {",
                      "    pm.test('Not found response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "df9bb3a7-994a-42ca-bf29-25f72a2c917e"
                  }
                }
              ]
            },
            {
              "id": "7662d72a-bf0c-43d2-b9c4-82910a22700f",
              "name": "Delete App",
              "request": {
                "description": {
                  "content": "Delete an app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}",
                    "delete"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "07204f5b-3b71-4fa5-bd70-f5dd1d716405",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 500', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 500]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has success message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('message');",
                      "        pm.expect(responseJson.message).to.include('deleted');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 500) {",
                      "    pm.test('Server error response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "6d315dab-9d38-46bd-bbd3-ef9bad017ae2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "467dbd0e-a6e5-43b8-b6f5-f840ea8a3bf3",
          "length": 10,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "022c2f5f-921d-4181-929e-4495e7b97d22",
          "scriptId": "db8b02aa-565c-4246-a65a-d9848e21b74d",
          "execution": "78ada079-b145-4c01-82c4-01e187991d14"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time is less than 3000ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:4)",
          "checksum": "2bf8860b1cc1689bac62f22b5c50815a",
          "id": "f61cc5e8-05b0-414e-85e5-5cf980cbe339",
          "timestamp": 1758971164810,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "4323e29f-6357-4124-af93-532f208cd262",
          "name": "Create New App",
          "request": {
            "description": {
              "content": "Create a new app",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "apps",
                "create"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test API App\",\n  \"html\": \"<h1>Test App</h1>\",\n  \"css\": \"h1 { color: blue; }\",\n  \"js\": \"console.log('Test app loaded');\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "db8b02aa-565c-4246-a65a-d9848e21b74d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201 or 401', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([201, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    pm.test('Response has data property', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('data');",
                  "        pm.expect(responseJson.data).to.have.property('id');",
                  "        pm.expect(responseJson.data).to.have.property('name');",
                  "        ",
                  "        // Store app ID for subsequent tests",
                  "        pm.collectionVariables.set('test_app_id', responseJson.data.id);",
                  "    });",
                  "    ",
                  "    pm.test('App name matches request', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson.data.name).to.eql('Test API App');",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    pm.test('Unauthorized response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "}",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "78ada079-b145-4c01-82c4-01e187991d14"
              }
            }
          ]
        },
        "parent": {
          "id": "cf7761f7-0711-4c45-9f7f-b2f5d8b5c432",
          "name": "Apps Management",
          "description": {
            "content": "Apps CRUD operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "58b132b3-bb19-41df-a453-e6b32822ae02",
              "name": "Get All Apps",
              "request": {
                "description": {
                  "content": "Get all apps for authenticated user",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d8865627-1696-4cb7-b46e-0c81dbf398ac",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.be.an('array');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "5e469a43-8eab-49a3-85e4-8dd7dcbf3e2b"
                  }
                }
              ]
            },
            {
              "id": "4323e29f-6357-4124-af93-532f208cd262",
              "name": "Create New App",
              "request": {
                "description": {
                  "content": "Create a new app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test API App\",\n  \"html\": \"<h1>Test App</h1>\",\n  \"css\": \"h1 { color: blue; }\",\n  \"js\": \"console.log('Test app loaded');\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "db8b02aa-565c-4246-a65a-d9848e21b74d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "        ",
                      "        // Store app ID for subsequent tests",
                      "        pm.collectionVariables.set('test_app_id', responseJson.data.id);",
                      "    });",
                      "    ",
                      "    pm.test('App name matches request', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson.data.name).to.eql('Test API App');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "78ada079-b145-4c01-82c4-01e187991d14"
                  }
                }
              ]
            },
            {
              "id": "d3decd0a-7499-4bb0-ad79-82e60fdeb083",
              "name": "Get App by ID",
              "request": {
                "description": {
                  "content": "Get specific app by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "61e09f4b-cf49-4384-ae6a-2363eda2b308",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 404) {",
                      "    pm.test('Not found response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "b785828b-9c37-428d-b9fa-0214458364d6"
                  }
                }
              ]
            },
            {
              "id": "609a886d-cd93-4c21-95dd-74ae032bcbeb",
              "name": "Update App",
              "request": {
                "description": {
                  "content": "Update an existing app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}",
                    "update"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test API App\",\n  \"html\": \"<h1>Updated Test App</h1>\",\n  \"css\": \"h1 { color: red; }\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "96bea0cd-f28a-47e5-8f2e-b6e72674b2ca",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "    });",
                      "    ",
                      "    pm.test('App name was updated', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson.data.name).to.eql('Updated Test API App');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 404) {",
                      "    pm.test('Not found response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "df9bb3a7-994a-42ca-bf29-25f72a2c917e"
                  }
                }
              ]
            },
            {
              "id": "7662d72a-bf0c-43d2-b9c4-82910a22700f",
              "name": "Delete App",
              "request": {
                "description": {
                  "content": "Delete an app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}",
                    "delete"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "07204f5b-3b71-4fa5-bd70-f5dd1d716405",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 500', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 500]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has success message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('message');",
                      "        pm.expect(responseJson.message).to.include('deleted');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 500) {",
                      "    pm.test('Server error response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "6d315dab-9d38-46bd-bbd3-ef9bad017ae2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "467dbd0e-a6e5-43b8-b6f5-f840ea8a3bf3",
          "length": 10,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "022c2f5f-921d-4181-929e-4495e7b97d22",
          "scriptId": "db8b02aa-565c-4246-a65a-d9848e21b74d",
          "execution": "78ada079-b145-4c01-82c4-01e187991d14"
        }
      },
      {
        "error": {
          "code": "ERR_INVALID_IP_ADDRESS",
          "name": "TypeError",
          "message": "Invalid IP address: undefined",
          "stack": "TypeError [ERR_INVALID_IP_ADDRESS]: Invalid IP address: undefined\n    at emitLookup (node:net:1492:17)\n    at C:\\Dev's Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js:303:31\n    at Socket.done (C:\\Dev's Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js:254:21)\n    at Object.onceWrapper (node:events:633:26)\n    at Socket.emit (node:events:518:28)\n    at emitErrorNT (node:internal/streams/destroy:170:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:129:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)",
          "checksum": "7e04c003ff769fda9c017ef6fec24090",
          "id": "e75e4fe4-738d-4108-8a7d-fbb448b8482a",
          "timestamp": 1758971164858,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1492,
              "functionName": "emitLookup",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 17,
              "native": false
            },
            {
              "fileName": "Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js",
              "lineNumber": 303,
              "functionName": "C:\\Dev's",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js",
              "lineNumber": 254,
              "functionName": "Socket.done (C:\\Dev's",
              "typeName": "Socket",
              "methodName": "done (C:\\Dev's",
              "columnNumber": 21,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 633,
              "functionName": "Object.onceWrapper",
              "typeName": "Object",
              "methodName": "onceWrapper",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 518,
              "functionName": "Socket.emit",
              "typeName": "Socket",
              "methodName": "emit",
              "columnNumber": 28,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 170,
              "functionName": "emitErrorNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 129,
              "functionName": "emitErrorCloseNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 3,
              "native": false
            },
            {
              "fileName": "node:internal/process/task_queues",
              "lineNumber": 90,
              "functionName": "process.processTicksAndRejections",
              "typeName": "process",
              "methodName": "processTicksAndRejections",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "d3decd0a-7499-4bb0-ad79-82e60fdeb083",
          "name": "Get App by ID",
          "request": {
            "description": {
              "content": "Get specific app by ID",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "apps",
                "{{test_app_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "61e09f4b-cf49-4384-ae6a-2363eda2b308",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200, 401, or 404', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response has data property', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('data');",
                  "        pm.expect(responseJson.data).to.have.property('id');",
                  "        pm.expect(responseJson.data).to.have.property('name');",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    pm.test('Unauthorized response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "} else if (pm.response.code === 404) {",
                  "    pm.test('Not found response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "}",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "b785828b-9c37-428d-b9fa-0214458364d6"
              }
            }
          ]
        },
        "parent": {
          "id": "cf7761f7-0711-4c45-9f7f-b2f5d8b5c432",
          "name": "Apps Management",
          "description": {
            "content": "Apps CRUD operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "58b132b3-bb19-41df-a453-e6b32822ae02",
              "name": "Get All Apps",
              "request": {
                "description": {
                  "content": "Get all apps for authenticated user",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d8865627-1696-4cb7-b46e-0c81dbf398ac",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.be.an('array');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "5e469a43-8eab-49a3-85e4-8dd7dcbf3e2b"
                  }
                }
              ]
            },
            {
              "id": "4323e29f-6357-4124-af93-532f208cd262",
              "name": "Create New App",
              "request": {
                "description": {
                  "content": "Create a new app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test API App\",\n  \"html\": \"<h1>Test App</h1>\",\n  \"css\": \"h1 { color: blue; }\",\n  \"js\": \"console.log('Test app loaded');\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "db8b02aa-565c-4246-a65a-d9848e21b74d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "        ",
                      "        // Store app ID for subsequent tests",
                      "        pm.collectionVariables.set('test_app_id', responseJson.data.id);",
                      "    });",
                      "    ",
                      "    pm.test('App name matches request', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson.data.name).to.eql('Test API App');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "78ada079-b145-4c01-82c4-01e187991d14"
                  }
                }
              ]
            },
            {
              "id": "d3decd0a-7499-4bb0-ad79-82e60fdeb083",
              "name": "Get App by ID",
              "request": {
                "description": {
                  "content": "Get specific app by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "61e09f4b-cf49-4384-ae6a-2363eda2b308",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 404) {",
                      "    pm.test('Not found response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "b785828b-9c37-428d-b9fa-0214458364d6"
                  }
                }
              ]
            },
            {
              "id": "609a886d-cd93-4c21-95dd-74ae032bcbeb",
              "name": "Update App",
              "request": {
                "description": {
                  "content": "Update an existing app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}",
                    "update"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test API App\",\n  \"html\": \"<h1>Updated Test App</h1>\",\n  \"css\": \"h1 { color: red; }\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "96bea0cd-f28a-47e5-8f2e-b6e72674b2ca",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "    });",
                      "    ",
                      "    pm.test('App name was updated', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson.data.name).to.eql('Updated Test API App');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 404) {",
                      "    pm.test('Not found response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "df9bb3a7-994a-42ca-bf29-25f72a2c917e"
                  }
                }
              ]
            },
            {
              "id": "7662d72a-bf0c-43d2-b9c4-82910a22700f",
              "name": "Delete App",
              "request": {
                "description": {
                  "content": "Delete an app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}",
                    "delete"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "07204f5b-3b71-4fa5-bd70-f5dd1d716405",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 500', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 500]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has success message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('message');",
                      "        pm.expect(responseJson.message).to.include('deleted');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 500) {",
                      "    pm.test('Server error response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "6d315dab-9d38-46bd-bbd3-ef9bad017ae2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "251d28a3-215b-4f7b-bf3e-070eff49b026",
          "length": 10,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ec5fe26f-5daa-46bc-b8c8-29d08e623848"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200, 401, or 404",
          "message": "expected undefined to be one of [ 200, 401, 404 ]",
          "stack": "AssertionError: expected undefined to be one of [ 200, 401, 404 ]\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "5a44fbe29719d79111dfe4431c485be4",
          "id": "b7aa0b6f-66e7-4154-afec-b20987cdef12",
          "timestamp": 1758971164876,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "d3decd0a-7499-4bb0-ad79-82e60fdeb083",
          "name": "Get App by ID",
          "request": {
            "description": {
              "content": "Get specific app by ID",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "apps",
                "{{test_app_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "61e09f4b-cf49-4384-ae6a-2363eda2b308",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200, 401, or 404', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response has data property', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('data');",
                  "        pm.expect(responseJson.data).to.have.property('id');",
                  "        pm.expect(responseJson.data).to.have.property('name');",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    pm.test('Unauthorized response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "} else if (pm.response.code === 404) {",
                  "    pm.test('Not found response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "}",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "b785828b-9c37-428d-b9fa-0214458364d6"
              }
            }
          ]
        },
        "parent": {
          "id": "cf7761f7-0711-4c45-9f7f-b2f5d8b5c432",
          "name": "Apps Management",
          "description": {
            "content": "Apps CRUD operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "58b132b3-bb19-41df-a453-e6b32822ae02",
              "name": "Get All Apps",
              "request": {
                "description": {
                  "content": "Get all apps for authenticated user",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d8865627-1696-4cb7-b46e-0c81dbf398ac",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.be.an('array');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "5e469a43-8eab-49a3-85e4-8dd7dcbf3e2b"
                  }
                }
              ]
            },
            {
              "id": "4323e29f-6357-4124-af93-532f208cd262",
              "name": "Create New App",
              "request": {
                "description": {
                  "content": "Create a new app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test API App\",\n  \"html\": \"<h1>Test App</h1>\",\n  \"css\": \"h1 { color: blue; }\",\n  \"js\": \"console.log('Test app loaded');\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "db8b02aa-565c-4246-a65a-d9848e21b74d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "        ",
                      "        // Store app ID for subsequent tests",
                      "        pm.collectionVariables.set('test_app_id', responseJson.data.id);",
                      "    });",
                      "    ",
                      "    pm.test('App name matches request', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson.data.name).to.eql('Test API App');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "78ada079-b145-4c01-82c4-01e187991d14"
                  }
                }
              ]
            },
            {
              "id": "d3decd0a-7499-4bb0-ad79-82e60fdeb083",
              "name": "Get App by ID",
              "request": {
                "description": {
                  "content": "Get specific app by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "61e09f4b-cf49-4384-ae6a-2363eda2b308",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 404) {",
                      "    pm.test('Not found response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "b785828b-9c37-428d-b9fa-0214458364d6"
                  }
                }
              ]
            },
            {
              "id": "609a886d-cd93-4c21-95dd-74ae032bcbeb",
              "name": "Update App",
              "request": {
                "description": {
                  "content": "Update an existing app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}",
                    "update"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test API App\",\n  \"html\": \"<h1>Updated Test App</h1>\",\n  \"css\": \"h1 { color: red; }\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "96bea0cd-f28a-47e5-8f2e-b6e72674b2ca",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "    });",
                      "    ",
                      "    pm.test('App name was updated', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson.data.name).to.eql('Updated Test API App');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 404) {",
                      "    pm.test('Not found response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "df9bb3a7-994a-42ca-bf29-25f72a2c917e"
                  }
                }
              ]
            },
            {
              "id": "7662d72a-bf0c-43d2-b9c4-82910a22700f",
              "name": "Delete App",
              "request": {
                "description": {
                  "content": "Delete an app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}",
                    "delete"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "07204f5b-3b71-4fa5-bd70-f5dd1d716405",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 500', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 500]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has success message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('message');",
                      "        pm.expect(responseJson.message).to.include('deleted');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 500) {",
                      "    pm.test('Server error response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "6d315dab-9d38-46bd-bbd3-ef9bad017ae2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "251d28a3-215b-4f7b-bf3e-070eff49b026",
          "length": 10,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ec5fe26f-5daa-46bc-b8c8-29d08e623848",
          "scriptId": "61e09f4b-cf49-4384-ae6a-2363eda2b308",
          "execution": "b785828b-9c37-428d-b9fa-0214458364d6"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time is less than 3000ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "c5d22cf57e9a436a92a63ead1c58d81a",
          "id": "8fd3173c-b3fa-415d-aaec-4178efdf4f2a",
          "timestamp": 1758971164877,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "d3decd0a-7499-4bb0-ad79-82e60fdeb083",
          "name": "Get App by ID",
          "request": {
            "description": {
              "content": "Get specific app by ID",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "apps",
                "{{test_app_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "61e09f4b-cf49-4384-ae6a-2363eda2b308",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200, 401, or 404', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response has data property', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('data');",
                  "        pm.expect(responseJson.data).to.have.property('id');",
                  "        pm.expect(responseJson.data).to.have.property('name');",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    pm.test('Unauthorized response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "} else if (pm.response.code === 404) {",
                  "    pm.test('Not found response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "}",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "b785828b-9c37-428d-b9fa-0214458364d6"
              }
            }
          ]
        },
        "parent": {
          "id": "cf7761f7-0711-4c45-9f7f-b2f5d8b5c432",
          "name": "Apps Management",
          "description": {
            "content": "Apps CRUD operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "58b132b3-bb19-41df-a453-e6b32822ae02",
              "name": "Get All Apps",
              "request": {
                "description": {
                  "content": "Get all apps for authenticated user",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d8865627-1696-4cb7-b46e-0c81dbf398ac",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.be.an('array');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "5e469a43-8eab-49a3-85e4-8dd7dcbf3e2b"
                  }
                }
              ]
            },
            {
              "id": "4323e29f-6357-4124-af93-532f208cd262",
              "name": "Create New App",
              "request": {
                "description": {
                  "content": "Create a new app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test API App\",\n  \"html\": \"<h1>Test App</h1>\",\n  \"css\": \"h1 { color: blue; }\",\n  \"js\": \"console.log('Test app loaded');\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "db8b02aa-565c-4246-a65a-d9848e21b74d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "        ",
                      "        // Store app ID for subsequent tests",
                      "        pm.collectionVariables.set('test_app_id', responseJson.data.id);",
                      "    });",
                      "    ",
                      "    pm.test('App name matches request', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson.data.name).to.eql('Test API App');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "78ada079-b145-4c01-82c4-01e187991d14"
                  }
                }
              ]
            },
            {
              "id": "d3decd0a-7499-4bb0-ad79-82e60fdeb083",
              "name": "Get App by ID",
              "request": {
                "description": {
                  "content": "Get specific app by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "61e09f4b-cf49-4384-ae6a-2363eda2b308",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 404) {",
                      "    pm.test('Not found response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "b785828b-9c37-428d-b9fa-0214458364d6"
                  }
                }
              ]
            },
            {
              "id": "609a886d-cd93-4c21-95dd-74ae032bcbeb",
              "name": "Update App",
              "request": {
                "description": {
                  "content": "Update an existing app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}",
                    "update"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test API App\",\n  \"html\": \"<h1>Updated Test App</h1>\",\n  \"css\": \"h1 { color: red; }\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "96bea0cd-f28a-47e5-8f2e-b6e72674b2ca",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "    });",
                      "    ",
                      "    pm.test('App name was updated', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson.data.name).to.eql('Updated Test API App');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 404) {",
                      "    pm.test('Not found response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "df9bb3a7-994a-42ca-bf29-25f72a2c917e"
                  }
                }
              ]
            },
            {
              "id": "7662d72a-bf0c-43d2-b9c4-82910a22700f",
              "name": "Delete App",
              "request": {
                "description": {
                  "content": "Delete an app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}",
                    "delete"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "07204f5b-3b71-4fa5-bd70-f5dd1d716405",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 500', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 500]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has success message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('message');",
                      "        pm.expect(responseJson.message).to.include('deleted');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 500) {",
                      "    pm.test('Server error response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "6d315dab-9d38-46bd-bbd3-ef9bad017ae2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "251d28a3-215b-4f7b-bf3e-070eff49b026",
          "length": 10,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ec5fe26f-5daa-46bc-b8c8-29d08e623848",
          "scriptId": "61e09f4b-cf49-4384-ae6a-2363eda2b308",
          "execution": "b785828b-9c37-428d-b9fa-0214458364d6"
        }
      },
      {
        "error": {
          "code": "ERR_INVALID_IP_ADDRESS",
          "name": "TypeError",
          "message": "Invalid IP address: undefined",
          "stack": "TypeError [ERR_INVALID_IP_ADDRESS]: Invalid IP address: undefined\n    at emitLookup (node:net:1492:17)\n    at C:\\Dev's Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js:303:31\n    at Socket.done (C:\\Dev's Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js:254:21)\n    at Object.onceWrapper (node:events:633:26)\n    at Socket.emit (node:events:518:28)\n    at emitErrorNT (node:internal/streams/destroy:170:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:129:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)",
          "checksum": "7e04c003ff769fda9c017ef6fec24090",
          "id": "a6a46acd-d192-4a38-b689-6a277849cc1c",
          "timestamp": 1758971164942,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1492,
              "functionName": "emitLookup",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 17,
              "native": false
            },
            {
              "fileName": "Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js",
              "lineNumber": 303,
              "functionName": "C:\\Dev's",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js",
              "lineNumber": 254,
              "functionName": "Socket.done (C:\\Dev's",
              "typeName": "Socket",
              "methodName": "done (C:\\Dev's",
              "columnNumber": 21,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 633,
              "functionName": "Object.onceWrapper",
              "typeName": "Object",
              "methodName": "onceWrapper",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 518,
              "functionName": "Socket.emit",
              "typeName": "Socket",
              "methodName": "emit",
              "columnNumber": 28,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 170,
              "functionName": "emitErrorNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 129,
              "functionName": "emitErrorCloseNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 3,
              "native": false
            },
            {
              "fileName": "node:internal/process/task_queues",
              "lineNumber": 90,
              "functionName": "process.processTicksAndRejections",
              "typeName": "process",
              "methodName": "processTicksAndRejections",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "609a886d-cd93-4c21-95dd-74ae032bcbeb",
          "name": "Update App",
          "request": {
            "description": {
              "content": "Update an existing app",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "apps",
                "{{test_app_id}}",
                "update"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test API App\",\n  \"html\": \"<h1>Updated Test App</h1>\",\n  \"css\": \"h1 { color: red; }\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "96bea0cd-f28a-47e5-8f2e-b6e72674b2ca",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200, 401, or 404', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response has data property', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('data');",
                  "        pm.expect(responseJson.data).to.have.property('id');",
                  "        pm.expect(responseJson.data).to.have.property('name');",
                  "    });",
                  "    ",
                  "    pm.test('App name was updated', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson.data.name).to.eql('Updated Test API App');",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    pm.test('Unauthorized response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "} else if (pm.response.code === 404) {",
                  "    pm.test('Not found response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "}",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "df9bb3a7-994a-42ca-bf29-25f72a2c917e"
              }
            }
          ]
        },
        "parent": {
          "id": "cf7761f7-0711-4c45-9f7f-b2f5d8b5c432",
          "name": "Apps Management",
          "description": {
            "content": "Apps CRUD operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "58b132b3-bb19-41df-a453-e6b32822ae02",
              "name": "Get All Apps",
              "request": {
                "description": {
                  "content": "Get all apps for authenticated user",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d8865627-1696-4cb7-b46e-0c81dbf398ac",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.be.an('array');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "5e469a43-8eab-49a3-85e4-8dd7dcbf3e2b"
                  }
                }
              ]
            },
            {
              "id": "4323e29f-6357-4124-af93-532f208cd262",
              "name": "Create New App",
              "request": {
                "description": {
                  "content": "Create a new app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test API App\",\n  \"html\": \"<h1>Test App</h1>\",\n  \"css\": \"h1 { color: blue; }\",\n  \"js\": \"console.log('Test app loaded');\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "db8b02aa-565c-4246-a65a-d9848e21b74d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "        ",
                      "        // Store app ID for subsequent tests",
                      "        pm.collectionVariables.set('test_app_id', responseJson.data.id);",
                      "    });",
                      "    ",
                      "    pm.test('App name matches request', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson.data.name).to.eql('Test API App');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "78ada079-b145-4c01-82c4-01e187991d14"
                  }
                }
              ]
            },
            {
              "id": "d3decd0a-7499-4bb0-ad79-82e60fdeb083",
              "name": "Get App by ID",
              "request": {
                "description": {
                  "content": "Get specific app by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "61e09f4b-cf49-4384-ae6a-2363eda2b308",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 404) {",
                      "    pm.test('Not found response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "b785828b-9c37-428d-b9fa-0214458364d6"
                  }
                }
              ]
            },
            {
              "id": "609a886d-cd93-4c21-95dd-74ae032bcbeb",
              "name": "Update App",
              "request": {
                "description": {
                  "content": "Update an existing app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}",
                    "update"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test API App\",\n  \"html\": \"<h1>Updated Test App</h1>\",\n  \"css\": \"h1 { color: red; }\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "96bea0cd-f28a-47e5-8f2e-b6e72674b2ca",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "    });",
                      "    ",
                      "    pm.test('App name was updated', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson.data.name).to.eql('Updated Test API App');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 404) {",
                      "    pm.test('Not found response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "df9bb3a7-994a-42ca-bf29-25f72a2c917e"
                  }
                }
              ]
            },
            {
              "id": "7662d72a-bf0c-43d2-b9c4-82910a22700f",
              "name": "Delete App",
              "request": {
                "description": {
                  "content": "Delete an app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}",
                    "delete"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "07204f5b-3b71-4fa5-bd70-f5dd1d716405",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 500', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 500]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has success message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('message');",
                      "        pm.expect(responseJson.message).to.include('deleted');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 500) {",
                      "    pm.test('Server error response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "6d315dab-9d38-46bd-bbd3-ef9bad017ae2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ca3c9907-95c9-4e85-9afb-1358c4f10501",
          "length": 10,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9625f580-6c7b-4cf8-bf13-53acc7feeb00"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200, 401, or 404",
          "message": "expected undefined to be one of [ 200, 401, 404 ]",
          "stack": "AssertionError: expected undefined to be one of [ 200, 401, 404 ]\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "230146d1a7e17193bc7a7e9964afacc7",
          "id": "63193ce4-f8b2-4e66-9278-f61593df5d8e",
          "timestamp": 1758971164960,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "609a886d-cd93-4c21-95dd-74ae032bcbeb",
          "name": "Update App",
          "request": {
            "description": {
              "content": "Update an existing app",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "apps",
                "{{test_app_id}}",
                "update"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test API App\",\n  \"html\": \"<h1>Updated Test App</h1>\",\n  \"css\": \"h1 { color: red; }\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "96bea0cd-f28a-47e5-8f2e-b6e72674b2ca",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200, 401, or 404', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response has data property', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('data');",
                  "        pm.expect(responseJson.data).to.have.property('id');",
                  "        pm.expect(responseJson.data).to.have.property('name');",
                  "    });",
                  "    ",
                  "    pm.test('App name was updated', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson.data.name).to.eql('Updated Test API App');",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    pm.test('Unauthorized response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "} else if (pm.response.code === 404) {",
                  "    pm.test('Not found response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "}",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "df9bb3a7-994a-42ca-bf29-25f72a2c917e"
              }
            }
          ]
        },
        "parent": {
          "id": "cf7761f7-0711-4c45-9f7f-b2f5d8b5c432",
          "name": "Apps Management",
          "description": {
            "content": "Apps CRUD operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "58b132b3-bb19-41df-a453-e6b32822ae02",
              "name": "Get All Apps",
              "request": {
                "description": {
                  "content": "Get all apps for authenticated user",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d8865627-1696-4cb7-b46e-0c81dbf398ac",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.be.an('array');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "5e469a43-8eab-49a3-85e4-8dd7dcbf3e2b"
                  }
                }
              ]
            },
            {
              "id": "4323e29f-6357-4124-af93-532f208cd262",
              "name": "Create New App",
              "request": {
                "description": {
                  "content": "Create a new app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test API App\",\n  \"html\": \"<h1>Test App</h1>\",\n  \"css\": \"h1 { color: blue; }\",\n  \"js\": \"console.log('Test app loaded');\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "db8b02aa-565c-4246-a65a-d9848e21b74d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "        ",
                      "        // Store app ID for subsequent tests",
                      "        pm.collectionVariables.set('test_app_id', responseJson.data.id);",
                      "    });",
                      "    ",
                      "    pm.test('App name matches request', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson.data.name).to.eql('Test API App');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "78ada079-b145-4c01-82c4-01e187991d14"
                  }
                }
              ]
            },
            {
              "id": "d3decd0a-7499-4bb0-ad79-82e60fdeb083",
              "name": "Get App by ID",
              "request": {
                "description": {
                  "content": "Get specific app by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "61e09f4b-cf49-4384-ae6a-2363eda2b308",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 404) {",
                      "    pm.test('Not found response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "b785828b-9c37-428d-b9fa-0214458364d6"
                  }
                }
              ]
            },
            {
              "id": "609a886d-cd93-4c21-95dd-74ae032bcbeb",
              "name": "Update App",
              "request": {
                "description": {
                  "content": "Update an existing app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}",
                    "update"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test API App\",\n  \"html\": \"<h1>Updated Test App</h1>\",\n  \"css\": \"h1 { color: red; }\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "96bea0cd-f28a-47e5-8f2e-b6e72674b2ca",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "    });",
                      "    ",
                      "    pm.test('App name was updated', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson.data.name).to.eql('Updated Test API App');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 404) {",
                      "    pm.test('Not found response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "df9bb3a7-994a-42ca-bf29-25f72a2c917e"
                  }
                }
              ]
            },
            {
              "id": "7662d72a-bf0c-43d2-b9c4-82910a22700f",
              "name": "Delete App",
              "request": {
                "description": {
                  "content": "Delete an app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}",
                    "delete"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "07204f5b-3b71-4fa5-bd70-f5dd1d716405",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 500', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 500]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has success message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('message');",
                      "        pm.expect(responseJson.message).to.include('deleted');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 500) {",
                      "    pm.test('Server error response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "6d315dab-9d38-46bd-bbd3-ef9bad017ae2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ca3c9907-95c9-4e85-9afb-1358c4f10501",
          "length": 10,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9625f580-6c7b-4cf8-bf13-53acc7feeb00",
          "scriptId": "96bea0cd-f28a-47e5-8f2e-b6e72674b2ca",
          "execution": "df9bb3a7-994a-42ca-bf29-25f72a2c917e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time is less than 3000ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:6)",
          "checksum": "30c19436e0f52754095a1fe1a415954d",
          "id": "a9c362f3-2bb4-4480-a775-d0aefcbd98ed",
          "timestamp": 1758971164961,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "609a886d-cd93-4c21-95dd-74ae032bcbeb",
          "name": "Update App",
          "request": {
            "description": {
              "content": "Update an existing app",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "apps",
                "{{test_app_id}}",
                "update"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test API App\",\n  \"html\": \"<h1>Updated Test App</h1>\",\n  \"css\": \"h1 { color: red; }\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "96bea0cd-f28a-47e5-8f2e-b6e72674b2ca",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200, 401, or 404', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response has data property', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('data');",
                  "        pm.expect(responseJson.data).to.have.property('id');",
                  "        pm.expect(responseJson.data).to.have.property('name');",
                  "    });",
                  "    ",
                  "    pm.test('App name was updated', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson.data.name).to.eql('Updated Test API App');",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    pm.test('Unauthorized response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "} else if (pm.response.code === 404) {",
                  "    pm.test('Not found response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "}",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "df9bb3a7-994a-42ca-bf29-25f72a2c917e"
              }
            }
          ]
        },
        "parent": {
          "id": "cf7761f7-0711-4c45-9f7f-b2f5d8b5c432",
          "name": "Apps Management",
          "description": {
            "content": "Apps CRUD operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "58b132b3-bb19-41df-a453-e6b32822ae02",
              "name": "Get All Apps",
              "request": {
                "description": {
                  "content": "Get all apps for authenticated user",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d8865627-1696-4cb7-b46e-0c81dbf398ac",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.be.an('array');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "5e469a43-8eab-49a3-85e4-8dd7dcbf3e2b"
                  }
                }
              ]
            },
            {
              "id": "4323e29f-6357-4124-af93-532f208cd262",
              "name": "Create New App",
              "request": {
                "description": {
                  "content": "Create a new app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test API App\",\n  \"html\": \"<h1>Test App</h1>\",\n  \"css\": \"h1 { color: blue; }\",\n  \"js\": \"console.log('Test app loaded');\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "db8b02aa-565c-4246-a65a-d9848e21b74d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "        ",
                      "        // Store app ID for subsequent tests",
                      "        pm.collectionVariables.set('test_app_id', responseJson.data.id);",
                      "    });",
                      "    ",
                      "    pm.test('App name matches request', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson.data.name).to.eql('Test API App');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "78ada079-b145-4c01-82c4-01e187991d14"
                  }
                }
              ]
            },
            {
              "id": "d3decd0a-7499-4bb0-ad79-82e60fdeb083",
              "name": "Get App by ID",
              "request": {
                "description": {
                  "content": "Get specific app by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "61e09f4b-cf49-4384-ae6a-2363eda2b308",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 404) {",
                      "    pm.test('Not found response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "b785828b-9c37-428d-b9fa-0214458364d6"
                  }
                }
              ]
            },
            {
              "id": "609a886d-cd93-4c21-95dd-74ae032bcbeb",
              "name": "Update App",
              "request": {
                "description": {
                  "content": "Update an existing app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}",
                    "update"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test API App\",\n  \"html\": \"<h1>Updated Test App</h1>\",\n  \"css\": \"h1 { color: red; }\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "96bea0cd-f28a-47e5-8f2e-b6e72674b2ca",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "    });",
                      "    ",
                      "    pm.test('App name was updated', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson.data.name).to.eql('Updated Test API App');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 404) {",
                      "    pm.test('Not found response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "df9bb3a7-994a-42ca-bf29-25f72a2c917e"
                  }
                }
              ]
            },
            {
              "id": "7662d72a-bf0c-43d2-b9c4-82910a22700f",
              "name": "Delete App",
              "request": {
                "description": {
                  "content": "Delete an app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}",
                    "delete"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "07204f5b-3b71-4fa5-bd70-f5dd1d716405",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 500', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 500]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has success message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('message');",
                      "        pm.expect(responseJson.message).to.include('deleted');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 500) {",
                      "    pm.test('Server error response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "6d315dab-9d38-46bd-bbd3-ef9bad017ae2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ca3c9907-95c9-4e85-9afb-1358c4f10501",
          "length": 10,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9625f580-6c7b-4cf8-bf13-53acc7feeb00",
          "scriptId": "96bea0cd-f28a-47e5-8f2e-b6e72674b2ca",
          "execution": "df9bb3a7-994a-42ca-bf29-25f72a2c917e"
        }
      },
      {
        "error": {
          "code": "ERR_INVALID_IP_ADDRESS",
          "name": "TypeError",
          "message": "Invalid IP address: undefined",
          "stack": "TypeError [ERR_INVALID_IP_ADDRESS]: Invalid IP address: undefined\n    at emitLookup (node:net:1492:17)\n    at C:\\Dev's Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js:303:31\n    at Socket.done (C:\\Dev's Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js:254:21)\n    at Object.onceWrapper (node:events:633:26)\n    at Socket.emit (node:events:518:28)\n    at emitErrorNT (node:internal/streams/destroy:170:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:129:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)",
          "checksum": "7e04c003ff769fda9c017ef6fec24090",
          "id": "5b6ae057-0426-45cd-912d-64ba03d72807",
          "timestamp": 1758971165024,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1492,
              "functionName": "emitLookup",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 17,
              "native": false
            },
            {
              "fileName": "Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js",
              "lineNumber": 303,
              "functionName": "C:\\Dev's",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js",
              "lineNumber": 254,
              "functionName": "Socket.done (C:\\Dev's",
              "typeName": "Socket",
              "methodName": "done (C:\\Dev's",
              "columnNumber": 21,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 633,
              "functionName": "Object.onceWrapper",
              "typeName": "Object",
              "methodName": "onceWrapper",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 518,
              "functionName": "Socket.emit",
              "typeName": "Socket",
              "methodName": "emit",
              "columnNumber": 28,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 170,
              "functionName": "emitErrorNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 129,
              "functionName": "emitErrorCloseNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 3,
              "native": false
            },
            {
              "fileName": "node:internal/process/task_queues",
              "lineNumber": 90,
              "functionName": "process.processTicksAndRejections",
              "typeName": "process",
              "methodName": "processTicksAndRejections",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "7662d72a-bf0c-43d2-b9c4-82910a22700f",
          "name": "Delete App",
          "request": {
            "description": {
              "content": "Delete an app",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "apps",
                "{{test_app_id}}",
                "delete"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "07204f5b-3b71-4fa5-bd70-f5dd1d716405",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200, 401, or 500', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 500]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response has success message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('message');",
                  "        pm.expect(responseJson.message).to.include('deleted');",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    pm.test('Unauthorized response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "} else if (pm.response.code === 500) {",
                  "    pm.test('Server error response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "}",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "6d315dab-9d38-46bd-bbd3-ef9bad017ae2"
              }
            }
          ]
        },
        "parent": {
          "id": "cf7761f7-0711-4c45-9f7f-b2f5d8b5c432",
          "name": "Apps Management",
          "description": {
            "content": "Apps CRUD operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "58b132b3-bb19-41df-a453-e6b32822ae02",
              "name": "Get All Apps",
              "request": {
                "description": {
                  "content": "Get all apps for authenticated user",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d8865627-1696-4cb7-b46e-0c81dbf398ac",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.be.an('array');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "5e469a43-8eab-49a3-85e4-8dd7dcbf3e2b"
                  }
                }
              ]
            },
            {
              "id": "4323e29f-6357-4124-af93-532f208cd262",
              "name": "Create New App",
              "request": {
                "description": {
                  "content": "Create a new app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test API App\",\n  \"html\": \"<h1>Test App</h1>\",\n  \"css\": \"h1 { color: blue; }\",\n  \"js\": \"console.log('Test app loaded');\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "db8b02aa-565c-4246-a65a-d9848e21b74d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "        ",
                      "        // Store app ID for subsequent tests",
                      "        pm.collectionVariables.set('test_app_id', responseJson.data.id);",
                      "    });",
                      "    ",
                      "    pm.test('App name matches request', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson.data.name).to.eql('Test API App');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "78ada079-b145-4c01-82c4-01e187991d14"
                  }
                }
              ]
            },
            {
              "id": "d3decd0a-7499-4bb0-ad79-82e60fdeb083",
              "name": "Get App by ID",
              "request": {
                "description": {
                  "content": "Get specific app by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "61e09f4b-cf49-4384-ae6a-2363eda2b308",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 404) {",
                      "    pm.test('Not found response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "b785828b-9c37-428d-b9fa-0214458364d6"
                  }
                }
              ]
            },
            {
              "id": "609a886d-cd93-4c21-95dd-74ae032bcbeb",
              "name": "Update App",
              "request": {
                "description": {
                  "content": "Update an existing app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}",
                    "update"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test API App\",\n  \"html\": \"<h1>Updated Test App</h1>\",\n  \"css\": \"h1 { color: red; }\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "96bea0cd-f28a-47e5-8f2e-b6e72674b2ca",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "    });",
                      "    ",
                      "    pm.test('App name was updated', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson.data.name).to.eql('Updated Test API App');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 404) {",
                      "    pm.test('Not found response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "df9bb3a7-994a-42ca-bf29-25f72a2c917e"
                  }
                }
              ]
            },
            {
              "id": "7662d72a-bf0c-43d2-b9c4-82910a22700f",
              "name": "Delete App",
              "request": {
                "description": {
                  "content": "Delete an app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}",
                    "delete"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "07204f5b-3b71-4fa5-bd70-f5dd1d716405",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 500', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 500]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has success message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('message');",
                      "        pm.expect(responseJson.message).to.include('deleted');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 500) {",
                      "    pm.test('Server error response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "6d315dab-9d38-46bd-bbd3-ef9bad017ae2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "392287ac-fe20-4435-89c8-f3a43ab7190d",
          "length": 10,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "2a71078e-96a6-4c25-a220-90a928a4379c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200, 401, or 500",
          "message": "expected undefined to be one of [ 200, 401, 500 ]",
          "stack": "AssertionError: expected undefined to be one of [ 200, 401, 500 ]\n   at Object.eval sandbox-script.js:1:7)",
          "checksum": "20c1cd087b66fa868eb5b8ec51b87d16",
          "id": "4763161f-a249-4e7d-8d10-00b7dd4bc87f",
          "timestamp": 1758971165043,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "7662d72a-bf0c-43d2-b9c4-82910a22700f",
          "name": "Delete App",
          "request": {
            "description": {
              "content": "Delete an app",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "apps",
                "{{test_app_id}}",
                "delete"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "07204f5b-3b71-4fa5-bd70-f5dd1d716405",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200, 401, or 500', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 500]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response has success message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('message');",
                  "        pm.expect(responseJson.message).to.include('deleted');",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    pm.test('Unauthorized response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "} else if (pm.response.code === 500) {",
                  "    pm.test('Server error response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "}",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "6d315dab-9d38-46bd-bbd3-ef9bad017ae2"
              }
            }
          ]
        },
        "parent": {
          "id": "cf7761f7-0711-4c45-9f7f-b2f5d8b5c432",
          "name": "Apps Management",
          "description": {
            "content": "Apps CRUD operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "58b132b3-bb19-41df-a453-e6b32822ae02",
              "name": "Get All Apps",
              "request": {
                "description": {
                  "content": "Get all apps for authenticated user",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d8865627-1696-4cb7-b46e-0c81dbf398ac",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.be.an('array');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "5e469a43-8eab-49a3-85e4-8dd7dcbf3e2b"
                  }
                }
              ]
            },
            {
              "id": "4323e29f-6357-4124-af93-532f208cd262",
              "name": "Create New App",
              "request": {
                "description": {
                  "content": "Create a new app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test API App\",\n  \"html\": \"<h1>Test App</h1>\",\n  \"css\": \"h1 { color: blue; }\",\n  \"js\": \"console.log('Test app loaded');\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "db8b02aa-565c-4246-a65a-d9848e21b74d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "        ",
                      "        // Store app ID for subsequent tests",
                      "        pm.collectionVariables.set('test_app_id', responseJson.data.id);",
                      "    });",
                      "    ",
                      "    pm.test('App name matches request', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson.data.name).to.eql('Test API App');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "78ada079-b145-4c01-82c4-01e187991d14"
                  }
                }
              ]
            },
            {
              "id": "d3decd0a-7499-4bb0-ad79-82e60fdeb083",
              "name": "Get App by ID",
              "request": {
                "description": {
                  "content": "Get specific app by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "61e09f4b-cf49-4384-ae6a-2363eda2b308",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 404) {",
                      "    pm.test('Not found response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "b785828b-9c37-428d-b9fa-0214458364d6"
                  }
                }
              ]
            },
            {
              "id": "609a886d-cd93-4c21-95dd-74ae032bcbeb",
              "name": "Update App",
              "request": {
                "description": {
                  "content": "Update an existing app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}",
                    "update"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test API App\",\n  \"html\": \"<h1>Updated Test App</h1>\",\n  \"css\": \"h1 { color: red; }\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "96bea0cd-f28a-47e5-8f2e-b6e72674b2ca",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "    });",
                      "    ",
                      "    pm.test('App name was updated', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson.data.name).to.eql('Updated Test API App');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 404) {",
                      "    pm.test('Not found response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "df9bb3a7-994a-42ca-bf29-25f72a2c917e"
                  }
                }
              ]
            },
            {
              "id": "7662d72a-bf0c-43d2-b9c4-82910a22700f",
              "name": "Delete App",
              "request": {
                "description": {
                  "content": "Delete an app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}",
                    "delete"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "07204f5b-3b71-4fa5-bd70-f5dd1d716405",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 500', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 500]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has success message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('message');",
                      "        pm.expect(responseJson.message).to.include('deleted');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 500) {",
                      "    pm.test('Server error response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "6d315dab-9d38-46bd-bbd3-ef9bad017ae2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "392287ac-fe20-4435-89c8-f3a43ab7190d",
          "length": 10,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "2a71078e-96a6-4c25-a220-90a928a4379c",
          "scriptId": "07204f5b-3b71-4fa5-bd70-f5dd1d716405",
          "execution": "6d315dab-9d38-46bd-bbd3-ef9bad017ae2"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time is less than 3000ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:7)",
          "checksum": "36aadc11d9f00adc965d9532598b214a",
          "id": "b5ba2792-3e50-404f-b8ea-7fe1b55c88e2",
          "timestamp": 1758971165044,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "7662d72a-bf0c-43d2-b9c4-82910a22700f",
          "name": "Delete App",
          "request": {
            "description": {
              "content": "Delete an app",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "apps",
                "{{test_app_id}}",
                "delete"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "07204f5b-3b71-4fa5-bd70-f5dd1d716405",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200, 401, or 500', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 500]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response has success message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('message');",
                  "        pm.expect(responseJson.message).to.include('deleted');",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    pm.test('Unauthorized response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "} else if (pm.response.code === 500) {",
                  "    pm.test('Server error response has error message', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('error');",
                  "    });",
                  "}",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "6d315dab-9d38-46bd-bbd3-ef9bad017ae2"
              }
            }
          ]
        },
        "parent": {
          "id": "cf7761f7-0711-4c45-9f7f-b2f5d8b5c432",
          "name": "Apps Management",
          "description": {
            "content": "Apps CRUD operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "58b132b3-bb19-41df-a453-e6b32822ae02",
              "name": "Get All Apps",
              "request": {
                "description": {
                  "content": "Get all apps for authenticated user",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d8865627-1696-4cb7-b46e-0c81dbf398ac",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.be.an('array');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "5e469a43-8eab-49a3-85e4-8dd7dcbf3e2b"
                  }
                }
              ]
            },
            {
              "id": "4323e29f-6357-4124-af93-532f208cd262",
              "name": "Create New App",
              "request": {
                "description": {
                  "content": "Create a new app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test API App\",\n  \"html\": \"<h1>Test App</h1>\",\n  \"css\": \"h1 { color: blue; }\",\n  \"js\": \"console.log('Test app loaded');\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "db8b02aa-565c-4246-a65a-d9848e21b74d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "        ",
                      "        // Store app ID for subsequent tests",
                      "        pm.collectionVariables.set('test_app_id', responseJson.data.id);",
                      "    });",
                      "    ",
                      "    pm.test('App name matches request', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson.data.name).to.eql('Test API App');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "78ada079-b145-4c01-82c4-01e187991d14"
                  }
                }
              ]
            },
            {
              "id": "d3decd0a-7499-4bb0-ad79-82e60fdeb083",
              "name": "Get App by ID",
              "request": {
                "description": {
                  "content": "Get specific app by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "61e09f4b-cf49-4384-ae6a-2363eda2b308",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 404) {",
                      "    pm.test('Not found response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "b785828b-9c37-428d-b9fa-0214458364d6"
                  }
                }
              ]
            },
            {
              "id": "609a886d-cd93-4c21-95dd-74ae032bcbeb",
              "name": "Update App",
              "request": {
                "description": {
                  "content": "Update an existing app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}",
                    "update"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test API App\",\n  \"html\": \"<h1>Updated Test App</h1>\",\n  \"css\": \"h1 { color: red; }\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "96bea0cd-f28a-47e5-8f2e-b6e72674b2ca",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has data property', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('data');",
                      "        pm.expect(responseJson.data).to.have.property('id');",
                      "        pm.expect(responseJson.data).to.have.property('name');",
                      "    });",
                      "    ",
                      "    pm.test('App name was updated', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson.data.name).to.eql('Updated Test API App');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 404) {",
                      "    pm.test('Not found response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "df9bb3a7-994a-42ca-bf29-25f72a2c917e"
                  }
                }
              ]
            },
            {
              "id": "7662d72a-bf0c-43d2-b9c4-82910a22700f",
              "name": "Delete App",
              "request": {
                "description": {
                  "content": "Delete an app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "{{test_app_id}}",
                    "delete"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "07204f5b-3b71-4fa5-bd70-f5dd1d716405",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200, 401, or 500', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 500]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response has success message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('message');",
                      "        pm.expect(responseJson.message).to.include('deleted');",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test('Unauthorized response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "} else if (pm.response.code === 500) {",
                      "    pm.test('Server error response has error message', function () {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('error');",
                      "    });",
                      "}",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "6d315dab-9d38-46bd-bbd3-ef9bad017ae2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "392287ac-fe20-4435-89c8-f3a43ab7190d",
          "length": 10,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "2a71078e-96a6-4c25-a220-90a928a4379c",
          "scriptId": "07204f5b-3b71-4fa5-bd70-f5dd1d716405",
          "execution": "6d315dab-9d38-46bd-bbd3-ef9bad017ae2"
        }
      },
      {
        "error": {
          "code": "ERR_INVALID_IP_ADDRESS",
          "name": "TypeError",
          "message": "Invalid IP address: undefined",
          "stack": "TypeError [ERR_INVALID_IP_ADDRESS]: Invalid IP address: undefined\n    at emitLookup (node:net:1492:17)\n    at C:\\Dev's Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js:303:31\n    at Socket.done (C:\\Dev's Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js:254:21)\n    at Object.onceWrapper (node:events:633:26)\n    at Socket.emit (node:events:518:28)\n    at emitErrorNT (node:internal/streams/destroy:170:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:129:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)",
          "checksum": "7e04c003ff769fda9c017ef6fec24090",
          "id": "c90408b7-8a4b-4c8f-aa50-3541d5356264",
          "timestamp": 1758971165107,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1492,
              "functionName": "emitLookup",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 17,
              "native": false
            },
            {
              "fileName": "Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js",
              "lineNumber": 303,
              "functionName": "C:\\Dev's",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js",
              "lineNumber": 254,
              "functionName": "Socket.done (C:\\Dev's",
              "typeName": "Socket",
              "methodName": "done (C:\\Dev's",
              "columnNumber": 21,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 633,
              "functionName": "Object.onceWrapper",
              "typeName": "Object",
              "methodName": "onceWrapper",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 518,
              "functionName": "Socket.emit",
              "typeName": "Socket",
              "methodName": "emit",
              "columnNumber": 28,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 170,
              "functionName": "emitErrorNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 129,
              "functionName": "emitErrorCloseNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 3,
              "native": false
            },
            {
              "fileName": "node:internal/process/task_queues",
              "lineNumber": 90,
              "functionName": "process.processTicksAndRejections",
              "typeName": "process",
              "methodName": "processTicksAndRejections",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "56e9a3ed-109b-4b8b-925a-013788fae50f",
          "name": "Auth Confirm (GET)",
          "request": {
            "description": {
              "content": "Authentication confirmation endpoint (expected to redirect)",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "auth",
                "confirm"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "token_hash",
                  "value": "dummy"
                },
                {
                  "key": "type",
                  "value": "signup"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9e59a1d8-98e8-4247-90ef-04ddcaddd66e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 302 (redirect)', function () {",
                  "    pm.expect(pm.response.code).to.eql(302);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "_lastExecutionId": "f132b633-4ccd-487d-afe4-683b86f3f193"
              }
            }
          ]
        },
        "parent": {
          "id": "613ae34b-52c4-45b0-be43-ee43a60e40af",
          "name": "Authentication",
          "description": {
            "content": "Authentication related endpoints",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "56e9a3ed-109b-4b8b-925a-013788fae50f",
              "name": "Auth Confirm (GET)",
              "request": {
                "description": {
                  "content": "Authentication confirmation endpoint (expected to redirect)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "auth",
                    "confirm"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "token_hash",
                      "value": "dummy"
                    },
                    {
                      "key": "type",
                      "value": "signup"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9e59a1d8-98e8-4247-90ef-04ddcaddd66e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 302 (redirect)', function () {",
                      "    pm.expect(pm.response.code).to.eql(302);",
                      "});",
                      "",
                      "pm.test('Response time is less than 2000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});"
                    ],
                    "_lastExecutionId": "f132b633-4ccd-487d-afe4-683b86f3f193"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3e2b06e2-9852-4cb1-bcc4-f3ff7422ccbf",
          "length": 10,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e037c2ad-1ccf-4c6c-929a-b8a3674dc127"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 302 (redirect)",
          "message": "expected undefined to deeply equal 302",
          "stack": "AssertionError: expected undefined to deeply equal 302\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "98bbc46f2b0fb54c67b25863cff54023",
          "id": "4433f6a6-d040-4662-8caa-c5935b487af4",
          "timestamp": 1758971165127,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "56e9a3ed-109b-4b8b-925a-013788fae50f",
          "name": "Auth Confirm (GET)",
          "request": {
            "description": {
              "content": "Authentication confirmation endpoint (expected to redirect)",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "auth",
                "confirm"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "token_hash",
                  "value": "dummy"
                },
                {
                  "key": "type",
                  "value": "signup"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9e59a1d8-98e8-4247-90ef-04ddcaddd66e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 302 (redirect)', function () {",
                  "    pm.expect(pm.response.code).to.eql(302);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "_lastExecutionId": "f132b633-4ccd-487d-afe4-683b86f3f193"
              }
            }
          ]
        },
        "parent": {
          "id": "613ae34b-52c4-45b0-be43-ee43a60e40af",
          "name": "Authentication",
          "description": {
            "content": "Authentication related endpoints",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "56e9a3ed-109b-4b8b-925a-013788fae50f",
              "name": "Auth Confirm (GET)",
              "request": {
                "description": {
                  "content": "Authentication confirmation endpoint (expected to redirect)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "auth",
                    "confirm"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "token_hash",
                      "value": "dummy"
                    },
                    {
                      "key": "type",
                      "value": "signup"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9e59a1d8-98e8-4247-90ef-04ddcaddd66e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 302 (redirect)', function () {",
                      "    pm.expect(pm.response.code).to.eql(302);",
                      "});",
                      "",
                      "pm.test('Response time is less than 2000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});"
                    ],
                    "_lastExecutionId": "f132b633-4ccd-487d-afe4-683b86f3f193"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3e2b06e2-9852-4cb1-bcc4-f3ff7422ccbf",
          "length": 10,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e037c2ad-1ccf-4c6c-929a-b8a3674dc127",
          "scriptId": "9e59a1d8-98e8-4247-90ef-04ddcaddd66e",
          "execution": "f132b633-4ccd-487d-afe4-683b86f3f193"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time is less than 2000ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:8)",
          "checksum": "8e29f0547402c94d9fe9265ce2b6dca2",
          "id": "c2287ea7-38bd-44d2-81cb-cf765646040a",
          "timestamp": 1758971165130,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "56e9a3ed-109b-4b8b-925a-013788fae50f",
          "name": "Auth Confirm (GET)",
          "request": {
            "description": {
              "content": "Authentication confirmation endpoint (expected to redirect)",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "auth",
                "confirm"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "token_hash",
                  "value": "dummy"
                },
                {
                  "key": "type",
                  "value": "signup"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9e59a1d8-98e8-4247-90ef-04ddcaddd66e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 302 (redirect)', function () {",
                  "    pm.expect(pm.response.code).to.eql(302);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "_lastExecutionId": "f132b633-4ccd-487d-afe4-683b86f3f193"
              }
            }
          ]
        },
        "parent": {
          "id": "613ae34b-52c4-45b0-be43-ee43a60e40af",
          "name": "Authentication",
          "description": {
            "content": "Authentication related endpoints",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "56e9a3ed-109b-4b8b-925a-013788fae50f",
              "name": "Auth Confirm (GET)",
              "request": {
                "description": {
                  "content": "Authentication confirmation endpoint (expected to redirect)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "auth",
                    "confirm"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "token_hash",
                      "value": "dummy"
                    },
                    {
                      "key": "type",
                      "value": "signup"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9e59a1d8-98e8-4247-90ef-04ddcaddd66e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 302 (redirect)', function () {",
                      "    pm.expect(pm.response.code).to.eql(302);",
                      "});",
                      "",
                      "pm.test('Response time is less than 2000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});"
                    ],
                    "_lastExecutionId": "f132b633-4ccd-487d-afe4-683b86f3f193"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3e2b06e2-9852-4cb1-bcc4-f3ff7422ccbf",
          "length": 10,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e037c2ad-1ccf-4c6c-929a-b8a3674dc127",
          "scriptId": "9e59a1d8-98e8-4247-90ef-04ddcaddd66e",
          "execution": "f132b633-4ccd-487d-afe4-683b86f3f193"
        }
      },
      {
        "error": {
          "code": "ERR_INVALID_IP_ADDRESS",
          "name": "TypeError",
          "message": "Invalid IP address: undefined",
          "stack": "TypeError [ERR_INVALID_IP_ADDRESS]: Invalid IP address: undefined\n    at emitLookup (node:net:1492:17)\n    at C:\\Dev's Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js:303:31\n    at Socket.done (C:\\Dev's Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js:254:21)\n    at Object.onceWrapper (node:events:633:26)\n    at Socket.emit (node:events:518:28)\n    at emitErrorNT (node:internal/streams/destroy:170:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:129:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)",
          "checksum": "7e04c003ff769fda9c017ef6fec24090",
          "id": "79c5c44b-8083-42da-80e6-def41f7d568d",
          "timestamp": 1758971165210,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1492,
              "functionName": "emitLookup",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 17,
              "native": false
            },
            {
              "fileName": "Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js",
              "lineNumber": 303,
              "functionName": "C:\\Dev's",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js",
              "lineNumber": 254,
              "functionName": "Socket.done (C:\\Dev's",
              "typeName": "Socket",
              "methodName": "done (C:\\Dev's",
              "columnNumber": 21,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 633,
              "functionName": "Object.onceWrapper",
              "typeName": "Object",
              "methodName": "onceWrapper",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 518,
              "functionName": "Socket.emit",
              "typeName": "Socket",
              "methodName": "emit",
              "columnNumber": 28,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 170,
              "functionName": "emitErrorNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 129,
              "functionName": "emitErrorCloseNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 3,
              "native": false
            },
            {
              "fileName": "node:internal/process/task_queues",
              "lineNumber": 90,
              "functionName": "process.processTicksAndRejections",
              "typeName": "process",
              "methodName": "processTicksAndRejections",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "33a45ff7-8d4a-4aed-8f0d-2cc17f84770d",
          "name": "Test Invalid App Creation",
          "request": {
            "description": {
              "content": "Test app creation with invalid data (empty name)",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "apps",
                "create"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"\",\n  \"html\": \"<h1>Test</h1>\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4c624495-2932-4058-8ea9-fc7a439114a9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400 or 401', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 401]);",
                  "});",
                  "",
                  "pm.test('Response has error message', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "ee8aacd9-0820-4253-b080-074da61876e1"
              }
            }
          ]
        },
        "parent": {
          "id": "00141775-c7a5-4a26-a760-fef1f49501c9",
          "name": "Error Handling Tests",
          "description": {
            "content": "Error handling and edge case tests",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "33a45ff7-8d4a-4aed-8f0d-2cc17f84770d",
              "name": "Test Invalid App Creation",
              "request": {
                "description": {
                  "content": "Test app creation with invalid data (empty name)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"\",\n  \"html\": \"<h1>Test</h1>\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4c624495-2932-4058-8ea9-fc7a439114a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([400, 401]);",
                      "});",
                      "",
                      "pm.test('Response has error message', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "ee8aacd9-0820-4253-b080-074da61876e1"
                  }
                }
              ]
            },
            {
              "id": "d89cf653-9f50-4b9f-9265-6f09f0616486",
              "name": "Test Nonexistent App Access",
              "request": {
                "description": {
                  "content": "Test access to nonexistent app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "99999999-9999-9999-9999-999999999999"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cd7d9eee-a81c-482e-941a-baff05fbcebd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([404, 401]);",
                      "});",
                      "",
                      "pm.test('Response has error message', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "3ceab9a9-3b3e-474a-bb05-e3f4f6d0aae5"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c61dbd06-402e-457e-9864-0b84b96d96c8",
          "length": 10,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "84b77936-caa7-4b67-8410-0657c6c3a232"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400 or 401",
          "message": "expected undefined to be one of [ 400, 401 ]",
          "stack": "AssertionError: expected undefined to be one of [ 400, 401 ]\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "3f55f5863f38f3e4b384d98314503539",
          "id": "8e5bbd5a-c0ea-4fe8-935d-20e18480241d",
          "timestamp": 1758971165228,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "33a45ff7-8d4a-4aed-8f0d-2cc17f84770d",
          "name": "Test Invalid App Creation",
          "request": {
            "description": {
              "content": "Test app creation with invalid data (empty name)",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "apps",
                "create"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"\",\n  \"html\": \"<h1>Test</h1>\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4c624495-2932-4058-8ea9-fc7a439114a9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400 or 401', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 401]);",
                  "});",
                  "",
                  "pm.test('Response has error message', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "ee8aacd9-0820-4253-b080-074da61876e1"
              }
            }
          ]
        },
        "parent": {
          "id": "00141775-c7a5-4a26-a760-fef1f49501c9",
          "name": "Error Handling Tests",
          "description": {
            "content": "Error handling and edge case tests",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "33a45ff7-8d4a-4aed-8f0d-2cc17f84770d",
              "name": "Test Invalid App Creation",
              "request": {
                "description": {
                  "content": "Test app creation with invalid data (empty name)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"\",\n  \"html\": \"<h1>Test</h1>\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4c624495-2932-4058-8ea9-fc7a439114a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([400, 401]);",
                      "});",
                      "",
                      "pm.test('Response has error message', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "ee8aacd9-0820-4253-b080-074da61876e1"
                  }
                }
              ]
            },
            {
              "id": "d89cf653-9f50-4b9f-9265-6f09f0616486",
              "name": "Test Nonexistent App Access",
              "request": {
                "description": {
                  "content": "Test access to nonexistent app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "99999999-9999-9999-9999-999999999999"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cd7d9eee-a81c-482e-941a-baff05fbcebd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([404, 401]);",
                      "});",
                      "",
                      "pm.test('Response has error message', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "3ceab9a9-3b3e-474a-bb05-e3f4f6d0aae5"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c61dbd06-402e-457e-9864-0b84b96d96c8",
          "length": 10,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "84b77936-caa7-4b67-8410-0657c6c3a232",
          "scriptId": "4c624495-2932-4058-8ea9-fc7a439114a9",
          "execution": "ee8aacd9-0820-4253-b080-074da61876e1"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response has error message",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:9)",
          "checksum": "4edd19f959f026a5ebbaf248c2a8aa5b",
          "id": "ccb01bc0-5ddd-4970-8d79-4ab896973bc7",
          "timestamp": 1758971165229,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "33a45ff7-8d4a-4aed-8f0d-2cc17f84770d",
          "name": "Test Invalid App Creation",
          "request": {
            "description": {
              "content": "Test app creation with invalid data (empty name)",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "apps",
                "create"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"\",\n  \"html\": \"<h1>Test</h1>\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4c624495-2932-4058-8ea9-fc7a439114a9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400 or 401', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 401]);",
                  "});",
                  "",
                  "pm.test('Response has error message', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "ee8aacd9-0820-4253-b080-074da61876e1"
              }
            }
          ]
        },
        "parent": {
          "id": "00141775-c7a5-4a26-a760-fef1f49501c9",
          "name": "Error Handling Tests",
          "description": {
            "content": "Error handling and edge case tests",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "33a45ff7-8d4a-4aed-8f0d-2cc17f84770d",
              "name": "Test Invalid App Creation",
              "request": {
                "description": {
                  "content": "Test app creation with invalid data (empty name)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"\",\n  \"html\": \"<h1>Test</h1>\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4c624495-2932-4058-8ea9-fc7a439114a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([400, 401]);",
                      "});",
                      "",
                      "pm.test('Response has error message', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "ee8aacd9-0820-4253-b080-074da61876e1"
                  }
                }
              ]
            },
            {
              "id": "d89cf653-9f50-4b9f-9265-6f09f0616486",
              "name": "Test Nonexistent App Access",
              "request": {
                "description": {
                  "content": "Test access to nonexistent app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "99999999-9999-9999-9999-999999999999"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cd7d9eee-a81c-482e-941a-baff05fbcebd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([404, 401]);",
                      "});",
                      "",
                      "pm.test('Response has error message', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "3ceab9a9-3b3e-474a-bb05-e3f4f6d0aae5"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c61dbd06-402e-457e-9864-0b84b96d96c8",
          "length": 10,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "84b77936-caa7-4b67-8410-0657c6c3a232",
          "scriptId": "4c624495-2932-4058-8ea9-fc7a439114a9",
          "execution": "ee8aacd9-0820-4253-b080-074da61876e1"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response time is less than 3000ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:3:9)",
          "checksum": "ffce1b87bcf64111e3fdd04974479847",
          "id": "114a3ade-53be-4f68-9152-d24dbd1cc198",
          "timestamp": 1758971165230,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "33a45ff7-8d4a-4aed-8f0d-2cc17f84770d",
          "name": "Test Invalid App Creation",
          "request": {
            "description": {
              "content": "Test app creation with invalid data (empty name)",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "apps",
                "create"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"\",\n  \"html\": \"<h1>Test</h1>\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4c624495-2932-4058-8ea9-fc7a439114a9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400 or 401', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 401]);",
                  "});",
                  "",
                  "pm.test('Response has error message', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "ee8aacd9-0820-4253-b080-074da61876e1"
              }
            }
          ]
        },
        "parent": {
          "id": "00141775-c7a5-4a26-a760-fef1f49501c9",
          "name": "Error Handling Tests",
          "description": {
            "content": "Error handling and edge case tests",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "33a45ff7-8d4a-4aed-8f0d-2cc17f84770d",
              "name": "Test Invalid App Creation",
              "request": {
                "description": {
                  "content": "Test app creation with invalid data (empty name)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"\",\n  \"html\": \"<h1>Test</h1>\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4c624495-2932-4058-8ea9-fc7a439114a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([400, 401]);",
                      "});",
                      "",
                      "pm.test('Response has error message', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "ee8aacd9-0820-4253-b080-074da61876e1"
                  }
                }
              ]
            },
            {
              "id": "d89cf653-9f50-4b9f-9265-6f09f0616486",
              "name": "Test Nonexistent App Access",
              "request": {
                "description": {
                  "content": "Test access to nonexistent app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "99999999-9999-9999-9999-999999999999"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cd7d9eee-a81c-482e-941a-baff05fbcebd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([404, 401]);",
                      "});",
                      "",
                      "pm.test('Response has error message', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "3ceab9a9-3b3e-474a-bb05-e3f4f6d0aae5"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c61dbd06-402e-457e-9864-0b84b96d96c8",
          "length": 10,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "84b77936-caa7-4b67-8410-0657c6c3a232",
          "scriptId": "4c624495-2932-4058-8ea9-fc7a439114a9",
          "execution": "ee8aacd9-0820-4253-b080-074da61876e1"
        }
      },
      {
        "error": {
          "code": "ERR_INVALID_IP_ADDRESS",
          "name": "TypeError",
          "message": "Invalid IP address: undefined",
          "stack": "TypeError [ERR_INVALID_IP_ADDRESS]: Invalid IP address: undefined\n    at emitLookup (node:net:1492:17)\n    at C:\\Dev's Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js:303:31\n    at Socket.done (C:\\Dev's Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js:254:21)\n    at Object.onceWrapper (node:events:633:26)\n    at Socket.emit (node:events:518:28)\n    at emitErrorNT (node:internal/streams/destroy:170:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:129:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)",
          "checksum": "7e04c003ff769fda9c017ef6fec24090",
          "id": "65d7575c-54b6-4985-86cd-dfe09af0ddd7",
          "timestamp": 1758971165276,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1492,
              "functionName": "emitLookup",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 17,
              "native": false
            },
            {
              "fileName": "Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js",
              "lineNumber": 303,
              "functionName": "C:\\Dev's",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "Maalainine\\uir-devops-tp-2\\node_modules\\postman-runtime\\lib\\requester\\core.js",
              "lineNumber": 254,
              "functionName": "Socket.done (C:\\Dev's",
              "typeName": "Socket",
              "methodName": "done (C:\\Dev's",
              "columnNumber": 21,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 633,
              "functionName": "Object.onceWrapper",
              "typeName": "Object",
              "methodName": "onceWrapper",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 518,
              "functionName": "Socket.emit",
              "typeName": "Socket",
              "methodName": "emit",
              "columnNumber": 28,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 170,
              "functionName": "emitErrorNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 129,
              "functionName": "emitErrorCloseNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 3,
              "native": false
            },
            {
              "fileName": "node:internal/process/task_queues",
              "lineNumber": 90,
              "functionName": "process.processTicksAndRejections",
              "typeName": "process",
              "methodName": "processTicksAndRejections",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "d89cf653-9f50-4b9f-9265-6f09f0616486",
          "name": "Test Nonexistent App Access",
          "request": {
            "description": {
              "content": "Test access to nonexistent app",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "apps",
                "99999999-9999-9999-9999-999999999999"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cd7d9eee-a81c-482e-941a-baff05fbcebd",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 404 or 401', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([404, 401]);",
                  "});",
                  "",
                  "pm.test('Response has error message', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "3ceab9a9-3b3e-474a-bb05-e3f4f6d0aae5"
              }
            }
          ]
        },
        "parent": {
          "id": "00141775-c7a5-4a26-a760-fef1f49501c9",
          "name": "Error Handling Tests",
          "description": {
            "content": "Error handling and edge case tests",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "33a45ff7-8d4a-4aed-8f0d-2cc17f84770d",
              "name": "Test Invalid App Creation",
              "request": {
                "description": {
                  "content": "Test app creation with invalid data (empty name)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"\",\n  \"html\": \"<h1>Test</h1>\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4c624495-2932-4058-8ea9-fc7a439114a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([400, 401]);",
                      "});",
                      "",
                      "pm.test('Response has error message', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "ee8aacd9-0820-4253-b080-074da61876e1"
                  }
                }
              ]
            },
            {
              "id": "d89cf653-9f50-4b9f-9265-6f09f0616486",
              "name": "Test Nonexistent App Access",
              "request": {
                "description": {
                  "content": "Test access to nonexistent app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "99999999-9999-9999-9999-999999999999"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cd7d9eee-a81c-482e-941a-baff05fbcebd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([404, 401]);",
                      "});",
                      "",
                      "pm.test('Response has error message', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "3ceab9a9-3b3e-474a-bb05-e3f4f6d0aae5"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "e4bdc70d-b066-4a96-8def-95e9333b8264",
          "length": 10,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a32f3bbd-0ea1-4bc7-a7ca-35e48c904fdb"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 404 or 401",
          "message": "expected undefined to be one of [ 404, 401 ]",
          "stack": "AssertionError: expected undefined to be one of [ 404, 401 ]\n   at Object.eval sandbox-script.js:1:10)",
          "checksum": "3b4bec7e1835c3a17e8ba1d44a26b02c",
          "id": "e5385020-68a1-492f-bce1-6e3aa16e3cfb",
          "timestamp": 1758971165292,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "d89cf653-9f50-4b9f-9265-6f09f0616486",
          "name": "Test Nonexistent App Access",
          "request": {
            "description": {
              "content": "Test access to nonexistent app",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "apps",
                "99999999-9999-9999-9999-999999999999"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cd7d9eee-a81c-482e-941a-baff05fbcebd",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 404 or 401', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([404, 401]);",
                  "});",
                  "",
                  "pm.test('Response has error message', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "3ceab9a9-3b3e-474a-bb05-e3f4f6d0aae5"
              }
            }
          ]
        },
        "parent": {
          "id": "00141775-c7a5-4a26-a760-fef1f49501c9",
          "name": "Error Handling Tests",
          "description": {
            "content": "Error handling and edge case tests",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "33a45ff7-8d4a-4aed-8f0d-2cc17f84770d",
              "name": "Test Invalid App Creation",
              "request": {
                "description": {
                  "content": "Test app creation with invalid data (empty name)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"\",\n  \"html\": \"<h1>Test</h1>\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4c624495-2932-4058-8ea9-fc7a439114a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([400, 401]);",
                      "});",
                      "",
                      "pm.test('Response has error message', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "ee8aacd9-0820-4253-b080-074da61876e1"
                  }
                }
              ]
            },
            {
              "id": "d89cf653-9f50-4b9f-9265-6f09f0616486",
              "name": "Test Nonexistent App Access",
              "request": {
                "description": {
                  "content": "Test access to nonexistent app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "99999999-9999-9999-9999-999999999999"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cd7d9eee-a81c-482e-941a-baff05fbcebd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([404, 401]);",
                      "});",
                      "",
                      "pm.test('Response has error message', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "3ceab9a9-3b3e-474a-bb05-e3f4f6d0aae5"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "e4bdc70d-b066-4a96-8def-95e9333b8264",
          "length": 10,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a32f3bbd-0ea1-4bc7-a7ca-35e48c904fdb",
          "scriptId": "cd7d9eee-a81c-482e-941a-baff05fbcebd",
          "execution": "3ceab9a9-3b3e-474a-bb05-e3f4f6d0aae5"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response has error message",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:10)",
          "checksum": "e2b76d96424cfe83bd52f52a834c12e8",
          "id": "98b97abf-7ff7-4b0b-a7c2-c78e006315ef",
          "timestamp": 1758971165293,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "d89cf653-9f50-4b9f-9265-6f09f0616486",
          "name": "Test Nonexistent App Access",
          "request": {
            "description": {
              "content": "Test access to nonexistent app",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "apps",
                "99999999-9999-9999-9999-999999999999"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cd7d9eee-a81c-482e-941a-baff05fbcebd",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 404 or 401', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([404, 401]);",
                  "});",
                  "",
                  "pm.test('Response has error message', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "3ceab9a9-3b3e-474a-bb05-e3f4f6d0aae5"
              }
            }
          ]
        },
        "parent": {
          "id": "00141775-c7a5-4a26-a760-fef1f49501c9",
          "name": "Error Handling Tests",
          "description": {
            "content": "Error handling and edge case tests",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "33a45ff7-8d4a-4aed-8f0d-2cc17f84770d",
              "name": "Test Invalid App Creation",
              "request": {
                "description": {
                  "content": "Test app creation with invalid data (empty name)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"\",\n  \"html\": \"<h1>Test</h1>\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4c624495-2932-4058-8ea9-fc7a439114a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([400, 401]);",
                      "});",
                      "",
                      "pm.test('Response has error message', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "ee8aacd9-0820-4253-b080-074da61876e1"
                  }
                }
              ]
            },
            {
              "id": "d89cf653-9f50-4b9f-9265-6f09f0616486",
              "name": "Test Nonexistent App Access",
              "request": {
                "description": {
                  "content": "Test access to nonexistent app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "99999999-9999-9999-9999-999999999999"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cd7d9eee-a81c-482e-941a-baff05fbcebd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([404, 401]);",
                      "});",
                      "",
                      "pm.test('Response has error message', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "3ceab9a9-3b3e-474a-bb05-e3f4f6d0aae5"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "e4bdc70d-b066-4a96-8def-95e9333b8264",
          "length": 10,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a32f3bbd-0ea1-4bc7-a7ca-35e48c904fdb",
          "scriptId": "cd7d9eee-a81c-482e-941a-baff05fbcebd",
          "execution": "3ceab9a9-3b3e-474a-bb05-e3f4f6d0aae5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response time is less than 3000ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:3:10)",
          "checksum": "f8f19c5d9859d1f6cd1609bbf7bf8189",
          "id": "b0b7038c-fb0a-4a4f-9407-54c9206e72e2",
          "timestamp": 1758971165294,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "d89cf653-9f50-4b9f-9265-6f09f0616486",
          "name": "Test Nonexistent App Access",
          "request": {
            "description": {
              "content": "Test access to nonexistent app",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "apps",
                "99999999-9999-9999-9999-999999999999"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cd7d9eee-a81c-482e-941a-baff05fbcebd",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 404 or 401', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([404, 401]);",
                  "});",
                  "",
                  "pm.test('Response has error message', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "3ceab9a9-3b3e-474a-bb05-e3f4f6d0aae5"
              }
            }
          ]
        },
        "parent": {
          "id": "00141775-c7a5-4a26-a760-fef1f49501c9",
          "name": "Error Handling Tests",
          "description": {
            "content": "Error handling and edge case tests",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "33a45ff7-8d4a-4aed-8f0d-2cc17f84770d",
              "name": "Test Invalid App Creation",
              "request": {
                "description": {
                  "content": "Test app creation with invalid data (empty name)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"\",\n  \"html\": \"<h1>Test</h1>\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4c624495-2932-4058-8ea9-fc7a439114a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([400, 401]);",
                      "});",
                      "",
                      "pm.test('Response has error message', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "ee8aacd9-0820-4253-b080-074da61876e1"
                  }
                }
              ]
            },
            {
              "id": "d89cf653-9f50-4b9f-9265-6f09f0616486",
              "name": "Test Nonexistent App Access",
              "request": {
                "description": {
                  "content": "Test access to nonexistent app",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "apps",
                    "99999999-9999-9999-9999-999999999999"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cd7d9eee-a81c-482e-941a-baff05fbcebd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404 or 401', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([404, 401]);",
                      "});",
                      "",
                      "pm.test('Response has error message', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});",
                      "",
                      "pm.test('Response time is less than 3000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "3ceab9a9-3b3e-474a-bb05-e3f4f6d0aae5"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "e4bdc70d-b066-4a96-8def-95e9333b8264",
          "length": 10,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a32f3bbd-0ea1-4bc7-a7ca-35e48c904fdb",
          "scriptId": "cd7d9eee-a81c-482e-941a-baff05fbcebd",
          "execution": "3ceab9a9-3b3e-474a-bb05-e3f4f6d0aae5"
        }
      }
    ],
    "error": null
  }
}